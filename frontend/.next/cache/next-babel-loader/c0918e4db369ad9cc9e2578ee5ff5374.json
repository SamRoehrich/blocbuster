{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/playground/blocBuster/frontend/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport withApollo from 'next-with-apollo';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\nconst App = ({\n  Component,\n  pageProps,\n  apollo\n}) => __jsx(ApolloClient, {\n  client: apollo,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }\n}, __jsx(Component, _extends({}, pageProps, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }\n})));\n\nexport default withApollo(({\n  initialState\n}) => {\n  return new ApolloClient({\n    uri: 'http://localhost:4444',\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n})(App);","map":{"version":3,"sources":["/Users/sam/Desktop/playground/blocBuster/frontend/pages/_app.js"],"names":["withApollo","ApolloClient","ApolloProvider","InMemoryCache","App","Component","pageProps","apollo","initialState","uri","cache","restore"],"mappings":";;;;;;AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,QAA4D,gBAA5D;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,CAAD,KACR,MAAC,YAAD;AAAc,EAAA,MAAM,EAAEA,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADJ,CADJ;;AAMA,eAAeN,UAAU,CAAC,CAAC;AAAEQ,EAAAA;AAAF,CAAD,KAAsB;AAC5C,SAAO,IAAIP,YAAJ,CAAiB;AACtBQ,IAAAA,GAAG,EAAE,uBADiB;AAEtBC,IAAAA,KAAK,EAAE,IAAIP,aAAJ,GAAoBQ,OAApB,CAA4BH,YAAY,IAAI,EAA5C;AAFe,GAAjB,CAAP;AAID,CALsB,CAAV,CAKVJ,GALU,CAAf","sourcesContent":["import withApollo from 'next-with-apollo'\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\n\nconst App = ({ Component, pageProps, apollo }) => (\n    <ApolloClient client={apollo}>\n        <Component {...pageProps} />\n    </ApolloClient>\n)\n\nexport default withApollo(({ initialState }) => {\n    return new ApolloClient({\n      uri: 'http://localhost:4444',\n      cache: new InMemoryCache().restore(initialState || {}),\n    })\n  })(App)"]},"metadata":{},"sourceType":"module"}