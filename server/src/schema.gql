type Query {
    getAthletes: [Athlete!]!
    getCoaches: QueryPayload
}

type Mutation {
    createHeadCoach(
        fullName: String!,
        email: String!,
        password: String!,
        teamKey: String!,
        coachKey: String!
    ): AuthPayload

    signUpAthlete(
        fullName: String!,
        email: String!,
        password: String!,
        teamKey: String!
    ): AuthPayload

    signUpCoach(
        fullName: String!,
        email: String!,
        password: String!,
        teamKey: String!,
        coachKey: String!
    ): AuthPayload

    createTeam(
        teamName: String!,
        city: String!,
        state: String!,
        homeGym: String!,
    ): TeamPayload

    loginAthlete(email: String!, password: String!): AuthPayload

    loginCoach(email: String!, password: String!): AuthPayload
}

type QueryPayload {
    coach: [Coach!]
    athlete: Athlete
}

type AuthPayload {
    token: String!
    coach: Coach
    athlete: Athlete
}

type TeamPayload {
    token: String!
    team: Team
}

type Team {
    id: ID!
    teamName: String!
    headCoach: HeadCoach
    athletes: [Athlete!]
    coahces: [Coach!] 
    subTeams: [SubTeam!]
    library: [Workout!]
    posts: [Post!]
    schedule: Schedule
    phase: String
    city: String!
    state: String!
    homeGym: String!
}

type Schedule {
    id: ID!
    createdBy: Coach
    createdAt: String!
    team: Team
    athletes: [Athlete!]
}

type SubTeam {
    id: ID!
    headCoach: HeadCoach! 
    ahtletes: [Athlete!]
    coahces: [Coach!]
    library: [Workout!]
    posts: [Post!]
}

type HeadCoach {
    id: ID!
    team: Team 
    fullName: String!
    email: String!
    password: String!
    teamKey: String!
    coachKey: String!
}

type Coach {
    id: ID!
    fullName: String!
    team: Team 
    teams: [SubTeam!]
    email: String!
    password: String!
    teamKey: String!
    coachKey: String!
}

type Athlete {
    id: ID!
    fullName: String!
    email: String!
    password: String!
    stats: [AthleteStats!]
    parents: [Parent!]!
    team: Team
    teamKey: String!
    library: [Workout!]
    logBook: [LogItem!]
    phase: String
}

type Parent {
    id: ID!
    athlete: [Athlete!] 
    email: String!
    password: String!
    phoneNumber: String!
}

type LogItem {
    athlete: Athlete!
    id: ID!
    createdAt: String!
    title: String!
    description: String!
    comment: String
}

type AthleteStats {
    id: ID! 
    athlete: Athlete!
    createdAt: String!
    apeIndex: Int!
    height: Int!
    weight: Int!
    maxVGrade: Int!
    maxSportGrade: String!
    maxEdgeLoad: Int!
    maxEdgeTestSize: Int!
    SWREdge: Float
    maxPullLoad: Int!
    SWRBar: Float
    oneArmHangLoadLeft: Int!
    oneArmHangLoadRight: Int!
    oneArmHangSWR: Float!
    goalVGrade: Int!
    goalSportGrade: String!
}

type Post {
    id: ID
    coach: Coach!
    title: String!
    content: String!
    comments: [Comment!]
}

type Comment {
    post: Post!
    coach: Coach
    athlete: Athlete
    content: String!
}

type Workout {
    author: String!
    title: String!
    description: String!
}