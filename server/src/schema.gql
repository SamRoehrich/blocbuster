enum USER_TYPE {
    ATHLETE
    COACH
    HEAD_COACH
    PARENT
}

union User = Athlete | Coach | HeadCoach | Parent

type Query {
    getUser(email: String!): UserPayload
    currentUser: User
    getTeamInfo: Team!
    getTeamById(id: String!): Team
    getAthletes: [Athlete!]
    coachDetails: Coach 
}

type Mutation {

    createAthleteStats(
        athlete: String!
        apeIndex: Int!
        height: Int!
        weight: Int!
        maxVGrade: Int!
        maxSportGrade: String!
        maxEdgeLoad: Int!
        maxEdgeTestSize: Int!
        SWREdge: Float
        maxPullLoad: Int!
        SWRBar: Float
        oneArmHangLoadLeft: Int!
        oneArmHangLoadRight: Int!
        oneArmHangSWR: Float!
        goalVGrade: Int!
        goalSportGrade: String!
    ): AthletePayload

    createTeam(
        teamName: String!,
        city: String!,
        state: String!,
        homeGym: String!,
    ): TeamPayload

    createSubTeam(
        subTeamName: String!,
        parentTeam: String!,
    ): SubTeam

    createPost(
        title: String!
        content: String!
    ) : Post!

    loginCoach(email: String!, password: String!) : CoachPayload
    loginHeadCoach(email: String!, password: String!): HeadCoachPayload

    signUpAthlete(
        fullName: String!
        email: String!
        password: String!
        team: String!
    ): Athlete

    signUpCoach(
        fullName: String!
        email: String!
        password: String!
        team: String!
    ): Coach

    signUpHeadCoach(
        fullName: String!
        email: String!
        password: String!
        team: String!
    ): HeadCoach

    signUpParent(
        fullName: String!
        email: String!
        password: String!
        team: String!
    ): Parent
    
}

type AthletePayload {
    athlete: Athlete!
}

type CoachPayload {
    coach: Coach!
    token: String!
}

type HeadCoachPayload {
    headCoach: HeadCoach!
    token: String!
}

type AuthPayload {
    token: String
    user: User
    HeadCoach: Athlete
}

type UserPayload {
    user: User
    token: String
}

type TeamPayload {
    team: Team!
}

type Team {
    id: ID!
    teamName: String!
    headCoach: HeadCoach
    athletes: [Athlete!]
    coaches: [Coach!] 
    subTeams: [SubTeam!]
    library: [Workout!]
    posts: [Post!]
    schedule: Schedule
    phase: String
    city: String!
    state: String!
    homeGym: String!
}

type Schedule {
    id: ID!
    createdBy: Coach
    createdAt: String!
    team: Team
    athletes: [Athlete!]
}

type SubTeam {
    id: ID!
    subTeamName: String!
    headCoach: HeadCoach! 
    parentTeam: Team!
    athletes: [Athlete!]
    coaches: [Coach!]
    library: [Workout!]
    posts: [Post!]
}

type HeadCoach {
    id: ID!
    fullName: String!
    email: String!
    password: String!
    team: Team!
}

type Coach {
    id: ID!
    fullName: String!
    email: String!
    password: String!
    team: Team!
    teams: [SubTeam!]
}

type Athlete {
    id: ID!
    fullName: String!
    email: String!
    password: String!
    team: Team!
    subTeam: SubTeam
    stats: AthleteStats!
    library: [Workout!]
    logBook: [LogItem!]
    phase: String
    parents: [Parent!]
}

type Parent {
    id: ID!
    fullName: String!
    email: String!
    password: String!
    athlete: [Athlete!] 
    team: Team!
}

type LogItem {
    athlete: Athlete!
    id: ID!
    createdAt: String!
    title: String!
    description: String!
    comment: String
}

type AthleteStats {
    id: ID! 
    athlete: Athlete!
    createdAt: String!
    createdBy: Coach!
    apeIndex: Int!
    height: Int!
    weight: Int!
    maxVGrade: Int!
    maxSportGrade: String!
    maxEdgeLoad: Int!
    maxEdgeTestSize: Int!
    SWREdge: Float
    maxPullLoad: Int!
    SWRBar: Float
    oneArmHangLoadLeft: Int!
    oneArmHangLoadRight: Int!
    oneArmHangSWR: Float
    goalVGrade: Int!
    goalSportGrade: String!
}

type Post {
    id: ID
    postedBy: Coach!
    title: String!
    content: String!
    comments: [Comment!]
}

type Comment {
    post: Post!
    coach: Coach
    athlete: Athlete
    content: String!
}

type Workout {
    author: String!
    title: String!
    description: String!
}