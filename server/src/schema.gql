enum USER_TYPE {
    ATHLETE
    COACH
    HEAD_COACH
    PARENT
}

input LoginInput {
    email: String!
    password: String!
}

input SignUpInput {
    fullName: String!
    email: String!
    password: String!
    phoneNumber: String!
    userType: USER_TYPE
}

type Query {
    getUser(email: String!): UserPayload
    currentUser: User
    getTeamInfo: Team!
    getTeamById(id: String!): Team
}

type Mutation {
    createTeam(
        teamName: String!,
        city: String!,
        state: String!,
        homeGym: String!,
    ): TeamPayload

    createPost(
        title: String!
        content: String!
    ) : Post!

    loginUser(email: String!, password: String!) : AuthPayload

    signUpUser(
        fullName: String!
        email: String!
        password: String!
        phoneNumber: String!
        userType: USER_TYPE
        team: String!
    ): AuthPayload
}

type UserPayload {
    user: User
    token: String
}

type TeamPayload {
    team: Team!
}

type User {
    id: ID!
    fullName: String!
    userType: USER_TYPE
    email: String!
    password: String!
    phoneNumber: String!
    team: Team
    athlete: Athlete
    coach: Coach
    headCoach: HeadCoach
    parent: Parent
    posts: [Post!]
}

type Team {
    id: ID!
    teamName: String!
    headCoach: HeadCoach
    athletes: [Athlete!]
    coahces: [Coach!] 
    subTeams: [SubTeam!]
    library: [Workout!]
    posts: [Post!]
    schedule: Schedule
    phase: String
    city: String!
    state: String!
    homeGym: String!
}

type AuthPayload {
    token: String
    user: User
}
type Schedule {
    id: ID!
    createdBy: Coach
    createdAt: String!
    team: Team
    athletes: [Athlete!]
}

type SubTeam {
    id: ID!
    headCoach: HeadCoach! 
    ahtletes: [Athlete!]
    coahces: [Coach!]
    library: [Workout!]
    posts: [Post!]
}

type HeadCoach {
    id: ID!
    user: User!
}

type Coach {
    id: ID!
    user: User!
    teams: [SubTeam!]
}

type Athlete {
    id: ID!
    user: User!
    stats: [AthleteStats!]
    library: [Workout!]
    logBook: [LogItem!]
    phase: String
    parents: [Parent!]
}

type Parent {
    id: ID!
    athlete: [Athlete!] 
    user: User!
}

type LogItem {
    athlete: Athlete!
    id: ID!
    createdAt: String!
    title: String!
    description: String!
    comment: String
}

type AthleteStats {
    id: ID! 
    athlete: Athlete!
    createdAt: String!
    apeIndex: Int!
    height: Int!
    weight: Int!
    maxVGrade: Int!
    maxSportGrade: String!
    maxEdgeLoad: Int!
    maxEdgeTestSize: Int!
    SWREdge: Float
    maxPullLoad: Int!
    SWRBar: Float
    oneArmHangLoadLeft: Int!
    oneArmHangLoadRight: Int!
    oneArmHangSWR: Float!
    goalVGrade: Int!
    goalSportGrade: String!
}

type Post {
    id: ID
    postedBy: User!
    title: String!
    content: String!
    comments: [Comment!]
}

type Comment {
    post: Post!
    coach: Coach
    athlete: Athlete
    content: String!
}

type Workout {
    author: String!
    title: String!
    description: String!
}