module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateComment {
  count: Int!
}

type AggregateLogItem {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserClimbingStats {
  count: Int!
}

type AggregateWorkout {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  post: Post!
  user: User!
  content: String!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  post: PostCreateOneWithoutCommentsInput!
  user: UserCreateOneInput!
  content: String!
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutPostInput {
  id: ID
  user: UserCreateOneInput!
  content: String!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
}

type CommentPreviousValues {
  id: ID!
  content: String!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  post: PostUpdateOneRequiredWithoutCommentsInput
  user: UserUpdateOneRequiredInput
  content: String
}

input CommentUpdateManyDataInput {
  content: String
}

input CommentUpdateManyMutationInput {
  content: String
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutPostDataInput {
  user: UserUpdateOneRequiredInput
  content: String
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  post: PostWhereInput
  user: UserWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type LogItem {
  user: User!
  id: ID!
  createdAt: DateTime!
  title: String!
  description: String!
  comment: String
}

type LogItemConnection {
  pageInfo: PageInfo!
  edges: [LogItemEdge]!
  aggregate: AggregateLogItem!
}

input LogItemCreateInput {
  user: UserCreateOneWithoutLogBookInput!
  id: ID
  title: String!
  description: String!
  comment: String
}

input LogItemCreateManyWithoutUserInput {
  create: [LogItemCreateWithoutUserInput!]
  connect: [LogItemWhereUniqueInput!]
}

input LogItemCreateWithoutUserInput {
  id: ID
  title: String!
  description: String!
  comment: String
}

type LogItemEdge {
  node: LogItem!
  cursor: String!
}

enum LogItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  comment_ASC
  comment_DESC
}

type LogItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  description: String!
  comment: String
}

input LogItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  AND: [LogItemScalarWhereInput!]
  OR: [LogItemScalarWhereInput!]
  NOT: [LogItemScalarWhereInput!]
}

type LogItemSubscriptionPayload {
  mutation: MutationType!
  node: LogItem
  updatedFields: [String!]
  previousValues: LogItemPreviousValues
}

input LogItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LogItemWhereInput
  AND: [LogItemSubscriptionWhereInput!]
  OR: [LogItemSubscriptionWhereInput!]
  NOT: [LogItemSubscriptionWhereInput!]
}

input LogItemUpdateInput {
  user: UserUpdateOneRequiredWithoutLogBookInput
  title: String
  description: String
  comment: String
}

input LogItemUpdateManyDataInput {
  title: String
  description: String
  comment: String
}

input LogItemUpdateManyMutationInput {
  title: String
  description: String
  comment: String
}

input LogItemUpdateManyWithoutUserInput {
  create: [LogItemCreateWithoutUserInput!]
  delete: [LogItemWhereUniqueInput!]
  connect: [LogItemWhereUniqueInput!]
  set: [LogItemWhereUniqueInput!]
  disconnect: [LogItemWhereUniqueInput!]
  update: [LogItemUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LogItemUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LogItemScalarWhereInput!]
  updateMany: [LogItemUpdateManyWithWhereNestedInput!]
}

input LogItemUpdateManyWithWhereNestedInput {
  where: LogItemScalarWhereInput!
  data: LogItemUpdateManyDataInput!
}

input LogItemUpdateWithoutUserDataInput {
  title: String
  description: String
  comment: String
}

input LogItemUpdateWithWhereUniqueWithoutUserInput {
  where: LogItemWhereUniqueInput!
  data: LogItemUpdateWithoutUserDataInput!
}

input LogItemUpsertWithWhereUniqueWithoutUserInput {
  where: LogItemWhereUniqueInput!
  update: LogItemUpdateWithoutUserDataInput!
  create: LogItemCreateWithoutUserInput!
}

input LogItemWhereInput {
  user: UserWhereInput
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  AND: [LogItemWhereInput!]
  OR: [LogItemWhereInput!]
  NOT: [LogItemWhereInput!]
}

input LogItemWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createLogItem(data: LogItemCreateInput!): LogItem!
  updateLogItem(data: LogItemUpdateInput!, where: LogItemWhereUniqueInput!): LogItem
  updateManyLogItems(data: LogItemUpdateManyMutationInput!, where: LogItemWhereInput): BatchPayload!
  upsertLogItem(where: LogItemWhereUniqueInput!, create: LogItemCreateInput!, update: LogItemUpdateInput!): LogItem!
  deleteLogItem(where: LogItemWhereUniqueInput!): LogItem
  deleteManyLogItems(where: LogItemWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserClimbingStats(data: UserClimbingStatsCreateInput!): UserClimbingStats!
  updateUserClimbingStats(data: UserClimbingStatsUpdateInput!, where: UserClimbingStatsWhereUniqueInput!): UserClimbingStats
  updateManyUserClimbingStatses(data: UserClimbingStatsUpdateManyMutationInput!, where: UserClimbingStatsWhereInput): BatchPayload!
  upsertUserClimbingStats(where: UserClimbingStatsWhereUniqueInput!, create: UserClimbingStatsCreateInput!, update: UserClimbingStatsUpdateInput!): UserClimbingStats!
  deleteUserClimbingStats(where: UserClimbingStatsWhereUniqueInput!): UserClimbingStats
  deleteManyUserClimbingStatses(where: UserClimbingStatsWhereInput): BatchPayload!
  createWorkout(data: WorkoutCreateInput!): Workout!
  updateWorkout(data: WorkoutUpdateInput!, where: WorkoutWhereUniqueInput!): Workout
  updateManyWorkouts(data: WorkoutUpdateManyMutationInput!, where: WorkoutWhereInput): BatchPayload!
  upsertWorkout(where: WorkoutWhereUniqueInput!, create: WorkoutCreateInput!, update: WorkoutUpdateInput!): Workout!
  deleteWorkout(where: WorkoutWhereUniqueInput!): Workout
  deleteManyWorkouts(where: WorkoutWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  user: User!
  title: String!
  content: String!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  user: UserCreateOneWithoutPostsInput!
  title: String!
  content: String!
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  user: UserCreateOneWithoutPostsInput!
  title: String!
  content: String!
}

input PostCreateWithoutUserInput {
  id: ID
  title: String!
  content: String!
  comments: CommentCreateManyWithoutPostInput
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  content: String!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  user: UserUpdateOneRequiredWithoutPostsInput
  title: String
  content: String
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  title: String
  content: String
}

input PostUpdateManyMutationInput {
  title: String
  content: String
}

input PostUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutCommentsDataInput {
  user: UserUpdateOneRequiredWithoutPostsInput
  title: String
  content: String
}

input PostUpdateWithoutUserDataInput {
  title: String
  content: String
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserDataInput!
  create: PostCreateWithoutUserInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  logItem(where: LogItemWhereUniqueInput!): LogItem
  logItems(where: LogItemWhereInput, orderBy: LogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LogItem]!
  logItemsConnection(where: LogItemWhereInput, orderBy: LogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LogItemConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userClimbingStats(where: UserClimbingStatsWhereUniqueInput!): UserClimbingStats
  userClimbingStatses(where: UserClimbingStatsWhereInput, orderBy: UserClimbingStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserClimbingStats]!
  userClimbingStatsesConnection(where: UserClimbingStatsWhereInput, orderBy: UserClimbingStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserClimbingStatsConnection!
  workout(where: WorkoutWhereUniqueInput!): Workout
  workouts(where: WorkoutWhereInput, orderBy: WorkoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workout]!
  workoutsConnection(where: WorkoutWhereInput, orderBy: WorkoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkoutConnection!
  node(id: ID!): Node
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  logItem(where: LogItemSubscriptionWhereInput): LogItemSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userClimbingStats(where: UserClimbingStatsSubscriptionWhereInput): UserClimbingStatsSubscriptionPayload
  workout(where: WorkoutSubscriptionWhereInput): WorkoutSubscriptionPayload
}

type User {
  id: ID!
  userName: String!
  fullName: String!
  email: String!
  password: String!
  city: String!
  state: String!
  homeGym: String!
  logBook(where: LogItemWhereInput, orderBy: LogItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LogItem!]
  userClimbingStats(where: UserClimbingStatsWhereInput, orderBy: UserClimbingStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserClimbingStats!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  userLevel: UserLevel!
  phase: String
  schedule(where: WorkoutWhereInput, orderBy: WorkoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workout!]
}

type UserClimbingStats {
  id: ID!
  user: User!
  createdAt: DateTime!
  apeIndex: Int!
  height: Int!
  weight: Int!
  maxVGrade: Int!
  maxSportGrade: String!
  maxEdgeLoad: Int!
  maxEdgeTestSize: Int!
  SWREdge: Float
  maxPullLoad: Int!
  SWRBar: Float
  oneArmHangLoadLeft: Int!
  oneArmHangLoadRight: Int!
  oneArmHangSWR: Float!
  goalVGrade: Int!
  goalSportGrade: String!
}

type UserClimbingStatsConnection {
  pageInfo: PageInfo!
  edges: [UserClimbingStatsEdge]!
  aggregate: AggregateUserClimbingStats!
}

input UserClimbingStatsCreateInput {
  id: ID
  user: UserCreateOneWithoutUserClimbingStatsInput!
  apeIndex: Int!
  height: Int!
  weight: Int!
  maxVGrade: Int!
  maxSportGrade: String!
  maxEdgeLoad: Int!
  maxEdgeTestSize: Int!
  SWREdge: Float
  maxPullLoad: Int!
  SWRBar: Float
  oneArmHangLoadLeft: Int!
  oneArmHangLoadRight: Int!
  oneArmHangSWR: Float!
  goalVGrade: Int!
  goalSportGrade: String!
}

input UserClimbingStatsCreateManyWithoutUserInput {
  create: [UserClimbingStatsCreateWithoutUserInput!]
  connect: [UserClimbingStatsWhereUniqueInput!]
}

input UserClimbingStatsCreateWithoutUserInput {
  id: ID
  apeIndex: Int!
  height: Int!
  weight: Int!
  maxVGrade: Int!
  maxSportGrade: String!
  maxEdgeLoad: Int!
  maxEdgeTestSize: Int!
  SWREdge: Float
  maxPullLoad: Int!
  SWRBar: Float
  oneArmHangLoadLeft: Int!
  oneArmHangLoadRight: Int!
  oneArmHangSWR: Float!
  goalVGrade: Int!
  goalSportGrade: String!
}

type UserClimbingStatsEdge {
  node: UserClimbingStats!
  cursor: String!
}

enum UserClimbingStatsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  apeIndex_ASC
  apeIndex_DESC
  height_ASC
  height_DESC
  weight_ASC
  weight_DESC
  maxVGrade_ASC
  maxVGrade_DESC
  maxSportGrade_ASC
  maxSportGrade_DESC
  maxEdgeLoad_ASC
  maxEdgeLoad_DESC
  maxEdgeTestSize_ASC
  maxEdgeTestSize_DESC
  SWREdge_ASC
  SWREdge_DESC
  maxPullLoad_ASC
  maxPullLoad_DESC
  SWRBar_ASC
  SWRBar_DESC
  oneArmHangLoadLeft_ASC
  oneArmHangLoadLeft_DESC
  oneArmHangLoadRight_ASC
  oneArmHangLoadRight_DESC
  oneArmHangSWR_ASC
  oneArmHangSWR_DESC
  goalVGrade_ASC
  goalVGrade_DESC
  goalSportGrade_ASC
  goalSportGrade_DESC
}

type UserClimbingStatsPreviousValues {
  id: ID!
  createdAt: DateTime!
  apeIndex: Int!
  height: Int!
  weight: Int!
  maxVGrade: Int!
  maxSportGrade: String!
  maxEdgeLoad: Int!
  maxEdgeTestSize: Int!
  SWREdge: Float
  maxPullLoad: Int!
  SWRBar: Float
  oneArmHangLoadLeft: Int!
  oneArmHangLoadRight: Int!
  oneArmHangSWR: Float!
  goalVGrade: Int!
  goalSportGrade: String!
}

input UserClimbingStatsScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  apeIndex: Int
  apeIndex_not: Int
  apeIndex_in: [Int!]
  apeIndex_not_in: [Int!]
  apeIndex_lt: Int
  apeIndex_lte: Int
  apeIndex_gt: Int
  apeIndex_gte: Int
  height: Int
  height_not: Int
  height_in: [Int!]
  height_not_in: [Int!]
  height_lt: Int
  height_lte: Int
  height_gt: Int
  height_gte: Int
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  maxVGrade: Int
  maxVGrade_not: Int
  maxVGrade_in: [Int!]
  maxVGrade_not_in: [Int!]
  maxVGrade_lt: Int
  maxVGrade_lte: Int
  maxVGrade_gt: Int
  maxVGrade_gte: Int
  maxSportGrade: String
  maxSportGrade_not: String
  maxSportGrade_in: [String!]
  maxSportGrade_not_in: [String!]
  maxSportGrade_lt: String
  maxSportGrade_lte: String
  maxSportGrade_gt: String
  maxSportGrade_gte: String
  maxSportGrade_contains: String
  maxSportGrade_not_contains: String
  maxSportGrade_starts_with: String
  maxSportGrade_not_starts_with: String
  maxSportGrade_ends_with: String
  maxSportGrade_not_ends_with: String
  maxEdgeLoad: Int
  maxEdgeLoad_not: Int
  maxEdgeLoad_in: [Int!]
  maxEdgeLoad_not_in: [Int!]
  maxEdgeLoad_lt: Int
  maxEdgeLoad_lte: Int
  maxEdgeLoad_gt: Int
  maxEdgeLoad_gte: Int
  maxEdgeTestSize: Int
  maxEdgeTestSize_not: Int
  maxEdgeTestSize_in: [Int!]
  maxEdgeTestSize_not_in: [Int!]
  maxEdgeTestSize_lt: Int
  maxEdgeTestSize_lte: Int
  maxEdgeTestSize_gt: Int
  maxEdgeTestSize_gte: Int
  SWREdge: Float
  SWREdge_not: Float
  SWREdge_in: [Float!]
  SWREdge_not_in: [Float!]
  SWREdge_lt: Float
  SWREdge_lte: Float
  SWREdge_gt: Float
  SWREdge_gte: Float
  maxPullLoad: Int
  maxPullLoad_not: Int
  maxPullLoad_in: [Int!]
  maxPullLoad_not_in: [Int!]
  maxPullLoad_lt: Int
  maxPullLoad_lte: Int
  maxPullLoad_gt: Int
  maxPullLoad_gte: Int
  SWRBar: Float
  SWRBar_not: Float
  SWRBar_in: [Float!]
  SWRBar_not_in: [Float!]
  SWRBar_lt: Float
  SWRBar_lte: Float
  SWRBar_gt: Float
  SWRBar_gte: Float
  oneArmHangLoadLeft: Int
  oneArmHangLoadLeft_not: Int
  oneArmHangLoadLeft_in: [Int!]
  oneArmHangLoadLeft_not_in: [Int!]
  oneArmHangLoadLeft_lt: Int
  oneArmHangLoadLeft_lte: Int
  oneArmHangLoadLeft_gt: Int
  oneArmHangLoadLeft_gte: Int
  oneArmHangLoadRight: Int
  oneArmHangLoadRight_not: Int
  oneArmHangLoadRight_in: [Int!]
  oneArmHangLoadRight_not_in: [Int!]
  oneArmHangLoadRight_lt: Int
  oneArmHangLoadRight_lte: Int
  oneArmHangLoadRight_gt: Int
  oneArmHangLoadRight_gte: Int
  oneArmHangSWR: Float
  oneArmHangSWR_not: Float
  oneArmHangSWR_in: [Float!]
  oneArmHangSWR_not_in: [Float!]
  oneArmHangSWR_lt: Float
  oneArmHangSWR_lte: Float
  oneArmHangSWR_gt: Float
  oneArmHangSWR_gte: Float
  goalVGrade: Int
  goalVGrade_not: Int
  goalVGrade_in: [Int!]
  goalVGrade_not_in: [Int!]
  goalVGrade_lt: Int
  goalVGrade_lte: Int
  goalVGrade_gt: Int
  goalVGrade_gte: Int
  goalSportGrade: String
  goalSportGrade_not: String
  goalSportGrade_in: [String!]
  goalSportGrade_not_in: [String!]
  goalSportGrade_lt: String
  goalSportGrade_lte: String
  goalSportGrade_gt: String
  goalSportGrade_gte: String
  goalSportGrade_contains: String
  goalSportGrade_not_contains: String
  goalSportGrade_starts_with: String
  goalSportGrade_not_starts_with: String
  goalSportGrade_ends_with: String
  goalSportGrade_not_ends_with: String
  AND: [UserClimbingStatsScalarWhereInput!]
  OR: [UserClimbingStatsScalarWhereInput!]
  NOT: [UserClimbingStatsScalarWhereInput!]
}

type UserClimbingStatsSubscriptionPayload {
  mutation: MutationType!
  node: UserClimbingStats
  updatedFields: [String!]
  previousValues: UserClimbingStatsPreviousValues
}

input UserClimbingStatsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserClimbingStatsWhereInput
  AND: [UserClimbingStatsSubscriptionWhereInput!]
  OR: [UserClimbingStatsSubscriptionWhereInput!]
  NOT: [UserClimbingStatsSubscriptionWhereInput!]
}

input UserClimbingStatsUpdateInput {
  user: UserUpdateOneRequiredWithoutUserClimbingStatsInput
  apeIndex: Int
  height: Int
  weight: Int
  maxVGrade: Int
  maxSportGrade: String
  maxEdgeLoad: Int
  maxEdgeTestSize: Int
  SWREdge: Float
  maxPullLoad: Int
  SWRBar: Float
  oneArmHangLoadLeft: Int
  oneArmHangLoadRight: Int
  oneArmHangSWR: Float
  goalVGrade: Int
  goalSportGrade: String
}

input UserClimbingStatsUpdateManyDataInput {
  apeIndex: Int
  height: Int
  weight: Int
  maxVGrade: Int
  maxSportGrade: String
  maxEdgeLoad: Int
  maxEdgeTestSize: Int
  SWREdge: Float
  maxPullLoad: Int
  SWRBar: Float
  oneArmHangLoadLeft: Int
  oneArmHangLoadRight: Int
  oneArmHangSWR: Float
  goalVGrade: Int
  goalSportGrade: String
}

input UserClimbingStatsUpdateManyMutationInput {
  apeIndex: Int
  height: Int
  weight: Int
  maxVGrade: Int
  maxSportGrade: String
  maxEdgeLoad: Int
  maxEdgeTestSize: Int
  SWREdge: Float
  maxPullLoad: Int
  SWRBar: Float
  oneArmHangLoadLeft: Int
  oneArmHangLoadRight: Int
  oneArmHangSWR: Float
  goalVGrade: Int
  goalSportGrade: String
}

input UserClimbingStatsUpdateManyWithoutUserInput {
  create: [UserClimbingStatsCreateWithoutUserInput!]
  delete: [UserClimbingStatsWhereUniqueInput!]
  connect: [UserClimbingStatsWhereUniqueInput!]
  set: [UserClimbingStatsWhereUniqueInput!]
  disconnect: [UserClimbingStatsWhereUniqueInput!]
  update: [UserClimbingStatsUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [UserClimbingStatsUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [UserClimbingStatsScalarWhereInput!]
  updateMany: [UserClimbingStatsUpdateManyWithWhereNestedInput!]
}

input UserClimbingStatsUpdateManyWithWhereNestedInput {
  where: UserClimbingStatsScalarWhereInput!
  data: UserClimbingStatsUpdateManyDataInput!
}

input UserClimbingStatsUpdateWithoutUserDataInput {
  apeIndex: Int
  height: Int
  weight: Int
  maxVGrade: Int
  maxSportGrade: String
  maxEdgeLoad: Int
  maxEdgeTestSize: Int
  SWREdge: Float
  maxPullLoad: Int
  SWRBar: Float
  oneArmHangLoadLeft: Int
  oneArmHangLoadRight: Int
  oneArmHangSWR: Float
  goalVGrade: Int
  goalSportGrade: String
}

input UserClimbingStatsUpdateWithWhereUniqueWithoutUserInput {
  where: UserClimbingStatsWhereUniqueInput!
  data: UserClimbingStatsUpdateWithoutUserDataInput!
}

input UserClimbingStatsUpsertWithWhereUniqueWithoutUserInput {
  where: UserClimbingStatsWhereUniqueInput!
  update: UserClimbingStatsUpdateWithoutUserDataInput!
  create: UserClimbingStatsCreateWithoutUserInput!
}

input UserClimbingStatsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  apeIndex: Int
  apeIndex_not: Int
  apeIndex_in: [Int!]
  apeIndex_not_in: [Int!]
  apeIndex_lt: Int
  apeIndex_lte: Int
  apeIndex_gt: Int
  apeIndex_gte: Int
  height: Int
  height_not: Int
  height_in: [Int!]
  height_not_in: [Int!]
  height_lt: Int
  height_lte: Int
  height_gt: Int
  height_gte: Int
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  maxVGrade: Int
  maxVGrade_not: Int
  maxVGrade_in: [Int!]
  maxVGrade_not_in: [Int!]
  maxVGrade_lt: Int
  maxVGrade_lte: Int
  maxVGrade_gt: Int
  maxVGrade_gte: Int
  maxSportGrade: String
  maxSportGrade_not: String
  maxSportGrade_in: [String!]
  maxSportGrade_not_in: [String!]
  maxSportGrade_lt: String
  maxSportGrade_lte: String
  maxSportGrade_gt: String
  maxSportGrade_gte: String
  maxSportGrade_contains: String
  maxSportGrade_not_contains: String
  maxSportGrade_starts_with: String
  maxSportGrade_not_starts_with: String
  maxSportGrade_ends_with: String
  maxSportGrade_not_ends_with: String
  maxEdgeLoad: Int
  maxEdgeLoad_not: Int
  maxEdgeLoad_in: [Int!]
  maxEdgeLoad_not_in: [Int!]
  maxEdgeLoad_lt: Int
  maxEdgeLoad_lte: Int
  maxEdgeLoad_gt: Int
  maxEdgeLoad_gte: Int
  maxEdgeTestSize: Int
  maxEdgeTestSize_not: Int
  maxEdgeTestSize_in: [Int!]
  maxEdgeTestSize_not_in: [Int!]
  maxEdgeTestSize_lt: Int
  maxEdgeTestSize_lte: Int
  maxEdgeTestSize_gt: Int
  maxEdgeTestSize_gte: Int
  SWREdge: Float
  SWREdge_not: Float
  SWREdge_in: [Float!]
  SWREdge_not_in: [Float!]
  SWREdge_lt: Float
  SWREdge_lte: Float
  SWREdge_gt: Float
  SWREdge_gte: Float
  maxPullLoad: Int
  maxPullLoad_not: Int
  maxPullLoad_in: [Int!]
  maxPullLoad_not_in: [Int!]
  maxPullLoad_lt: Int
  maxPullLoad_lte: Int
  maxPullLoad_gt: Int
  maxPullLoad_gte: Int
  SWRBar: Float
  SWRBar_not: Float
  SWRBar_in: [Float!]
  SWRBar_not_in: [Float!]
  SWRBar_lt: Float
  SWRBar_lte: Float
  SWRBar_gt: Float
  SWRBar_gte: Float
  oneArmHangLoadLeft: Int
  oneArmHangLoadLeft_not: Int
  oneArmHangLoadLeft_in: [Int!]
  oneArmHangLoadLeft_not_in: [Int!]
  oneArmHangLoadLeft_lt: Int
  oneArmHangLoadLeft_lte: Int
  oneArmHangLoadLeft_gt: Int
  oneArmHangLoadLeft_gte: Int
  oneArmHangLoadRight: Int
  oneArmHangLoadRight_not: Int
  oneArmHangLoadRight_in: [Int!]
  oneArmHangLoadRight_not_in: [Int!]
  oneArmHangLoadRight_lt: Int
  oneArmHangLoadRight_lte: Int
  oneArmHangLoadRight_gt: Int
  oneArmHangLoadRight_gte: Int
  oneArmHangSWR: Float
  oneArmHangSWR_not: Float
  oneArmHangSWR_in: [Float!]
  oneArmHangSWR_not_in: [Float!]
  oneArmHangSWR_lt: Float
  oneArmHangSWR_lte: Float
  oneArmHangSWR_gt: Float
  oneArmHangSWR_gte: Float
  goalVGrade: Int
  goalVGrade_not: Int
  goalVGrade_in: [Int!]
  goalVGrade_not_in: [Int!]
  goalVGrade_lt: Int
  goalVGrade_lte: Int
  goalVGrade_gt: Int
  goalVGrade_gte: Int
  goalSportGrade: String
  goalSportGrade_not: String
  goalSportGrade_in: [String!]
  goalSportGrade_not_in: [String!]
  goalSportGrade_lt: String
  goalSportGrade_lte: String
  goalSportGrade_gt: String
  goalSportGrade_gte: String
  goalSportGrade_contains: String
  goalSportGrade_not_contains: String
  goalSportGrade_starts_with: String
  goalSportGrade_not_starts_with: String
  goalSportGrade_ends_with: String
  goalSportGrade_not_ends_with: String
  AND: [UserClimbingStatsWhereInput!]
  OR: [UserClimbingStatsWhereInput!]
  NOT: [UserClimbingStatsWhereInput!]
}

input UserClimbingStatsWhereUniqueInput {
  id: ID
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  userName: String!
  fullName: String!
  email: String!
  password: String!
  city: String!
  state: String!
  homeGym: String!
  logBook: LogItemCreateManyWithoutUserInput
  userClimbingStats: UserClimbingStatsCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  userLevel: UserLevel!
  phase: String
  schedule: WorkoutCreateManyInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLogBookInput {
  create: UserCreateWithoutLogBookInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserClimbingStatsInput {
  create: UserCreateWithoutUserClimbingStatsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutLogBookInput {
  id: ID
  userName: String!
  fullName: String!
  email: String!
  password: String!
  city: String!
  state: String!
  homeGym: String!
  userClimbingStats: UserClimbingStatsCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  userLevel: UserLevel!
  phase: String
  schedule: WorkoutCreateManyInput
}

input UserCreateWithoutPostsInput {
  id: ID
  userName: String!
  fullName: String!
  email: String!
  password: String!
  city: String!
  state: String!
  homeGym: String!
  logBook: LogItemCreateManyWithoutUserInput
  userClimbingStats: UserClimbingStatsCreateManyWithoutUserInput
  userLevel: UserLevel!
  phase: String
  schedule: WorkoutCreateManyInput
}

input UserCreateWithoutUserClimbingStatsInput {
  id: ID
  userName: String!
  fullName: String!
  email: String!
  password: String!
  city: String!
  state: String!
  homeGym: String!
  logBook: LogItemCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
  userLevel: UserLevel!
  phase: String
  schedule: WorkoutCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserLevel {
  FREE
  ADMIN
  COACH
  PAID
  ATHLETE
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  userName_ASC
  userName_DESC
  fullName_ASC
  fullName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  homeGym_ASC
  homeGym_DESC
  userLevel_ASC
  userLevel_DESC
  phase_ASC
  phase_DESC
}

type UserPreviousValues {
  id: ID!
  userName: String!
  fullName: String!
  email: String!
  password: String!
  city: String!
  state: String!
  homeGym: String!
  userLevel: UserLevel!
  phase: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  userName: String
  fullName: String
  email: String
  password: String
  city: String
  state: String
  homeGym: String
  logBook: LogItemUpdateManyWithoutUserInput
  userClimbingStats: UserClimbingStatsUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  userLevel: UserLevel
  phase: String
  schedule: WorkoutUpdateManyInput
}

input UserUpdateInput {
  userName: String
  fullName: String
  email: String
  password: String
  city: String
  state: String
  homeGym: String
  logBook: LogItemUpdateManyWithoutUserInput
  userClimbingStats: UserClimbingStatsUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  userLevel: UserLevel
  phase: String
  schedule: WorkoutUpdateManyInput
}

input UserUpdateManyMutationInput {
  userName: String
  fullName: String
  email: String
  password: String
  city: String
  state: String
  homeGym: String
  userLevel: UserLevel
  phase: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLogBookInput {
  create: UserCreateWithoutLogBookInput
  update: UserUpdateWithoutLogBookDataInput
  upsert: UserUpsertWithoutLogBookInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutUserClimbingStatsInput {
  create: UserCreateWithoutUserClimbingStatsInput
  update: UserUpdateWithoutUserClimbingStatsDataInput
  upsert: UserUpsertWithoutUserClimbingStatsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutLogBookDataInput {
  userName: String
  fullName: String
  email: String
  password: String
  city: String
  state: String
  homeGym: String
  userClimbingStats: UserClimbingStatsUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  userLevel: UserLevel
  phase: String
  schedule: WorkoutUpdateManyInput
}

input UserUpdateWithoutPostsDataInput {
  userName: String
  fullName: String
  email: String
  password: String
  city: String
  state: String
  homeGym: String
  logBook: LogItemUpdateManyWithoutUserInput
  userClimbingStats: UserClimbingStatsUpdateManyWithoutUserInput
  userLevel: UserLevel
  phase: String
  schedule: WorkoutUpdateManyInput
}

input UserUpdateWithoutUserClimbingStatsDataInput {
  userName: String
  fullName: String
  email: String
  password: String
  city: String
  state: String
  homeGym: String
  logBook: LogItemUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
  userLevel: UserLevel
  phase: String
  schedule: WorkoutUpdateManyInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutLogBookInput {
  update: UserUpdateWithoutLogBookDataInput!
  create: UserCreateWithoutLogBookInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutUserClimbingStatsInput {
  update: UserUpdateWithoutUserClimbingStatsDataInput!
  create: UserCreateWithoutUserClimbingStatsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  homeGym: String
  homeGym_not: String
  homeGym_in: [String!]
  homeGym_not_in: [String!]
  homeGym_lt: String
  homeGym_lte: String
  homeGym_gt: String
  homeGym_gte: String
  homeGym_contains: String
  homeGym_not_contains: String
  homeGym_starts_with: String
  homeGym_not_starts_with: String
  homeGym_ends_with: String
  homeGym_not_ends_with: String
  logBook_every: LogItemWhereInput
  logBook_some: LogItemWhereInput
  logBook_none: LogItemWhereInput
  userClimbingStats_every: UserClimbingStatsWhereInput
  userClimbingStats_some: UserClimbingStatsWhereInput
  userClimbingStats_none: UserClimbingStatsWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  userLevel: UserLevel
  userLevel_not: UserLevel
  userLevel_in: [UserLevel!]
  userLevel_not_in: [UserLevel!]
  phase: String
  phase_not: String
  phase_in: [String!]
  phase_not_in: [String!]
  phase_lt: String
  phase_lte: String
  phase_gt: String
  phase_gte: String
  phase_contains: String
  phase_not_contains: String
  phase_starts_with: String
  phase_not_starts_with: String
  phase_ends_with: String
  phase_not_ends_with: String
  schedule_every: WorkoutWhereInput
  schedule_some: WorkoutWhereInput
  schedule_none: WorkoutWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Workout {
  id: ID!
  author: String!
  title: String!
  description: String!
}

type WorkoutConnection {
  pageInfo: PageInfo!
  edges: [WorkoutEdge]!
  aggregate: AggregateWorkout!
}

input WorkoutCreateInput {
  id: ID
  author: String!
  title: String!
  description: String!
}

input WorkoutCreateManyInput {
  create: [WorkoutCreateInput!]
  connect: [WorkoutWhereUniqueInput!]
}

type WorkoutEdge {
  node: Workout!
  cursor: String!
}

enum WorkoutOrderByInput {
  id_ASC
  id_DESC
  author_ASC
  author_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type WorkoutPreviousValues {
  id: ID!
  author: String!
  title: String!
  description: String!
}

input WorkoutScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [WorkoutScalarWhereInput!]
  OR: [WorkoutScalarWhereInput!]
  NOT: [WorkoutScalarWhereInput!]
}

type WorkoutSubscriptionPayload {
  mutation: MutationType!
  node: Workout
  updatedFields: [String!]
  previousValues: WorkoutPreviousValues
}

input WorkoutSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkoutWhereInput
  AND: [WorkoutSubscriptionWhereInput!]
  OR: [WorkoutSubscriptionWhereInput!]
  NOT: [WorkoutSubscriptionWhereInput!]
}

input WorkoutUpdateDataInput {
  author: String
  title: String
  description: String
}

input WorkoutUpdateInput {
  author: String
  title: String
  description: String
}

input WorkoutUpdateManyDataInput {
  author: String
  title: String
  description: String
}

input WorkoutUpdateManyInput {
  create: [WorkoutCreateInput!]
  update: [WorkoutUpdateWithWhereUniqueNestedInput!]
  upsert: [WorkoutUpsertWithWhereUniqueNestedInput!]
  delete: [WorkoutWhereUniqueInput!]
  connect: [WorkoutWhereUniqueInput!]
  set: [WorkoutWhereUniqueInput!]
  disconnect: [WorkoutWhereUniqueInput!]
  deleteMany: [WorkoutScalarWhereInput!]
  updateMany: [WorkoutUpdateManyWithWhereNestedInput!]
}

input WorkoutUpdateManyMutationInput {
  author: String
  title: String
  description: String
}

input WorkoutUpdateManyWithWhereNestedInput {
  where: WorkoutScalarWhereInput!
  data: WorkoutUpdateManyDataInput!
}

input WorkoutUpdateWithWhereUniqueNestedInput {
  where: WorkoutWhereUniqueInput!
  data: WorkoutUpdateDataInput!
}

input WorkoutUpsertWithWhereUniqueNestedInput {
  where: WorkoutWhereUniqueInput!
  update: WorkoutUpdateDataInput!
  create: WorkoutCreateInput!
}

input WorkoutWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [WorkoutWhereInput!]
  OR: [WorkoutWhereInput!]
  NOT: [WorkoutWhereInput!]
}

input WorkoutWhereUniqueInput {
  id: ID
}
`
      }
    