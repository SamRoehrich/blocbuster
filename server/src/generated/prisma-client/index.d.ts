// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  logItem: (where?: LogItemWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userClimbingStats: (where?: UserClimbingStatsWhereInput) => Promise<boolean>;
  workout: (where?: WorkoutWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  logItem: (where: LogItemWhereUniqueInput) => LogItemNullablePromise;
  logItems: (args?: {
    where?: LogItemWhereInput;
    orderBy?: LogItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<LogItem>;
  logItemsConnection: (args?: {
    where?: LogItemWhereInput;
    orderBy?: LogItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LogItemConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userClimbingStats: (
    where: UserClimbingStatsWhereUniqueInput
  ) => UserClimbingStatsNullablePromise;
  userClimbingStatses: (args?: {
    where?: UserClimbingStatsWhereInput;
    orderBy?: UserClimbingStatsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserClimbingStats>;
  userClimbingStatsesConnection: (args?: {
    where?: UserClimbingStatsWhereInput;
    orderBy?: UserClimbingStatsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserClimbingStatsConnectionPromise;
  workout: (where: WorkoutWhereUniqueInput) => WorkoutNullablePromise;
  workouts: (args?: {
    where?: WorkoutWhereInput;
    orderBy?: WorkoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Workout>;
  workoutsConnection: (args?: {
    where?: WorkoutWhereInput;
    orderBy?: WorkoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WorkoutConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createLogItem: (data: LogItemCreateInput) => LogItemPromise;
  updateLogItem: (args: {
    data: LogItemUpdateInput;
    where: LogItemWhereUniqueInput;
  }) => LogItemPromise;
  updateManyLogItems: (args: {
    data: LogItemUpdateManyMutationInput;
    where?: LogItemWhereInput;
  }) => BatchPayloadPromise;
  upsertLogItem: (args: {
    where: LogItemWhereUniqueInput;
    create: LogItemCreateInput;
    update: LogItemUpdateInput;
  }) => LogItemPromise;
  deleteLogItem: (where: LogItemWhereUniqueInput) => LogItemPromise;
  deleteManyLogItems: (where?: LogItemWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserClimbingStats: (
    data: UserClimbingStatsCreateInput
  ) => UserClimbingStatsPromise;
  updateUserClimbingStats: (args: {
    data: UserClimbingStatsUpdateInput;
    where: UserClimbingStatsWhereUniqueInput;
  }) => UserClimbingStatsPromise;
  updateManyUserClimbingStatses: (args: {
    data: UserClimbingStatsUpdateManyMutationInput;
    where?: UserClimbingStatsWhereInput;
  }) => BatchPayloadPromise;
  upsertUserClimbingStats: (args: {
    where: UserClimbingStatsWhereUniqueInput;
    create: UserClimbingStatsCreateInput;
    update: UserClimbingStatsUpdateInput;
  }) => UserClimbingStatsPromise;
  deleteUserClimbingStats: (
    where: UserClimbingStatsWhereUniqueInput
  ) => UserClimbingStatsPromise;
  deleteManyUserClimbingStatses: (
    where?: UserClimbingStatsWhereInput
  ) => BatchPayloadPromise;
  createWorkout: (data: WorkoutCreateInput) => WorkoutPromise;
  updateWorkout: (args: {
    data: WorkoutUpdateInput;
    where: WorkoutWhereUniqueInput;
  }) => WorkoutPromise;
  updateManyWorkouts: (args: {
    data: WorkoutUpdateManyMutationInput;
    where?: WorkoutWhereInput;
  }) => BatchPayloadPromise;
  upsertWorkout: (args: {
    where: WorkoutWhereUniqueInput;
    create: WorkoutCreateInput;
    update: WorkoutUpdateInput;
  }) => WorkoutPromise;
  deleteWorkout: (where: WorkoutWhereUniqueInput) => WorkoutPromise;
  deleteManyWorkouts: (where?: WorkoutWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  logItem: (
    where?: LogItemSubscriptionWhereInput
  ) => LogItemSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userClimbingStats: (
    where?: UserClimbingStatsSubscriptionWhereInput
  ) => UserClimbingStatsSubscriptionPayloadSubscription;
  workout: (
    where?: WorkoutSubscriptionWhereInput
  ) => WorkoutSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserLevel = "FREE" | "ADMIN" | "COACH" | "PAID" | "ATHLETE";

export type LogItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "comment_ASC"
  | "comment_DESC";

export type UserClimbingStatsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "apeIndex_ASC"
  | "apeIndex_DESC"
  | "height_ASC"
  | "height_DESC"
  | "weight_ASC"
  | "weight_DESC"
  | "maxVGrade_ASC"
  | "maxVGrade_DESC"
  | "maxSportGrade_ASC"
  | "maxSportGrade_DESC"
  | "maxEdgeLoad_ASC"
  | "maxEdgeLoad_DESC"
  | "maxEdgeTestSize_ASC"
  | "maxEdgeTestSize_DESC"
  | "SWREdge_ASC"
  | "SWREdge_DESC"
  | "maxPullLoad_ASC"
  | "maxPullLoad_DESC"
  | "SWRBar_ASC"
  | "SWRBar_DESC"
  | "oneArmHangLoadLeft_ASC"
  | "oneArmHangLoadLeft_DESC"
  | "oneArmHangLoadRight_ASC"
  | "oneArmHangLoadRight_DESC"
  | "oneArmHangSWR_ASC"
  | "oneArmHangSWR_DESC"
  | "goalVGrade_ASC"
  | "goalVGrade_DESC"
  | "goalSportGrade_ASC"
  | "goalSportGrade_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC";

export type WorkoutOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "author_ASC"
  | "author_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userName_ASC"
  | "userName_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "homeGym_ASC"
  | "homeGym_DESC"
  | "userLevel_ASC"
  | "userLevel_DESC"
  | "phase_ASC"
  | "phase_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface LogItemUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  comment?: Maybe<String>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CommentUpdateManyMutationInput {
  content?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  userName: String;
  fullName: String;
  name: String;
  email: String;
  password: String;
  city: String;
  state: String;
  homeGym: String;
  logBook?: Maybe<LogItemCreateManyWithoutUserInput>;
  userClimbingStats?: Maybe<UserClimbingStatsCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  userLevel: UserLevel;
  phase?: Maybe<String>;
  schedule?: Maybe<WorkoutCreateManyInput>;
}

export interface UserClimbingStatsScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  apeIndex?: Maybe<Int>;
  apeIndex_not?: Maybe<Int>;
  apeIndex_in?: Maybe<Int[] | Int>;
  apeIndex_not_in?: Maybe<Int[] | Int>;
  apeIndex_lt?: Maybe<Int>;
  apeIndex_lte?: Maybe<Int>;
  apeIndex_gt?: Maybe<Int>;
  apeIndex_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  weight?: Maybe<Int>;
  weight_not?: Maybe<Int>;
  weight_in?: Maybe<Int[] | Int>;
  weight_not_in?: Maybe<Int[] | Int>;
  weight_lt?: Maybe<Int>;
  weight_lte?: Maybe<Int>;
  weight_gt?: Maybe<Int>;
  weight_gte?: Maybe<Int>;
  maxVGrade?: Maybe<Int>;
  maxVGrade_not?: Maybe<Int>;
  maxVGrade_in?: Maybe<Int[] | Int>;
  maxVGrade_not_in?: Maybe<Int[] | Int>;
  maxVGrade_lt?: Maybe<Int>;
  maxVGrade_lte?: Maybe<Int>;
  maxVGrade_gt?: Maybe<Int>;
  maxVGrade_gte?: Maybe<Int>;
  maxSportGrade?: Maybe<String>;
  maxSportGrade_not?: Maybe<String>;
  maxSportGrade_in?: Maybe<String[] | String>;
  maxSportGrade_not_in?: Maybe<String[] | String>;
  maxSportGrade_lt?: Maybe<String>;
  maxSportGrade_lte?: Maybe<String>;
  maxSportGrade_gt?: Maybe<String>;
  maxSportGrade_gte?: Maybe<String>;
  maxSportGrade_contains?: Maybe<String>;
  maxSportGrade_not_contains?: Maybe<String>;
  maxSportGrade_starts_with?: Maybe<String>;
  maxSportGrade_not_starts_with?: Maybe<String>;
  maxSportGrade_ends_with?: Maybe<String>;
  maxSportGrade_not_ends_with?: Maybe<String>;
  maxEdgeLoad?: Maybe<Int>;
  maxEdgeLoad_not?: Maybe<Int>;
  maxEdgeLoad_in?: Maybe<Int[] | Int>;
  maxEdgeLoad_not_in?: Maybe<Int[] | Int>;
  maxEdgeLoad_lt?: Maybe<Int>;
  maxEdgeLoad_lte?: Maybe<Int>;
  maxEdgeLoad_gt?: Maybe<Int>;
  maxEdgeLoad_gte?: Maybe<Int>;
  maxEdgeTestSize?: Maybe<Int>;
  maxEdgeTestSize_not?: Maybe<Int>;
  maxEdgeTestSize_in?: Maybe<Int[] | Int>;
  maxEdgeTestSize_not_in?: Maybe<Int[] | Int>;
  maxEdgeTestSize_lt?: Maybe<Int>;
  maxEdgeTestSize_lte?: Maybe<Int>;
  maxEdgeTestSize_gt?: Maybe<Int>;
  maxEdgeTestSize_gte?: Maybe<Int>;
  SWREdge?: Maybe<Float>;
  SWREdge_not?: Maybe<Float>;
  SWREdge_in?: Maybe<Float[] | Float>;
  SWREdge_not_in?: Maybe<Float[] | Float>;
  SWREdge_lt?: Maybe<Float>;
  SWREdge_lte?: Maybe<Float>;
  SWREdge_gt?: Maybe<Float>;
  SWREdge_gte?: Maybe<Float>;
  maxPullLoad?: Maybe<Int>;
  maxPullLoad_not?: Maybe<Int>;
  maxPullLoad_in?: Maybe<Int[] | Int>;
  maxPullLoad_not_in?: Maybe<Int[] | Int>;
  maxPullLoad_lt?: Maybe<Int>;
  maxPullLoad_lte?: Maybe<Int>;
  maxPullLoad_gt?: Maybe<Int>;
  maxPullLoad_gte?: Maybe<Int>;
  SWRBar?: Maybe<Float>;
  SWRBar_not?: Maybe<Float>;
  SWRBar_in?: Maybe<Float[] | Float>;
  SWRBar_not_in?: Maybe<Float[] | Float>;
  SWRBar_lt?: Maybe<Float>;
  SWRBar_lte?: Maybe<Float>;
  SWRBar_gt?: Maybe<Float>;
  SWRBar_gte?: Maybe<Float>;
  oneArmHangLoadLeft?: Maybe<Int>;
  oneArmHangLoadLeft_not?: Maybe<Int>;
  oneArmHangLoadLeft_in?: Maybe<Int[] | Int>;
  oneArmHangLoadLeft_not_in?: Maybe<Int[] | Int>;
  oneArmHangLoadLeft_lt?: Maybe<Int>;
  oneArmHangLoadLeft_lte?: Maybe<Int>;
  oneArmHangLoadLeft_gt?: Maybe<Int>;
  oneArmHangLoadLeft_gte?: Maybe<Int>;
  oneArmHangLoadRight?: Maybe<Int>;
  oneArmHangLoadRight_not?: Maybe<Int>;
  oneArmHangLoadRight_in?: Maybe<Int[] | Int>;
  oneArmHangLoadRight_not_in?: Maybe<Int[] | Int>;
  oneArmHangLoadRight_lt?: Maybe<Int>;
  oneArmHangLoadRight_lte?: Maybe<Int>;
  oneArmHangLoadRight_gt?: Maybe<Int>;
  oneArmHangLoadRight_gte?: Maybe<Int>;
  oneArmHangSWR?: Maybe<Float>;
  oneArmHangSWR_not?: Maybe<Float>;
  oneArmHangSWR_in?: Maybe<Float[] | Float>;
  oneArmHangSWR_not_in?: Maybe<Float[] | Float>;
  oneArmHangSWR_lt?: Maybe<Float>;
  oneArmHangSWR_lte?: Maybe<Float>;
  oneArmHangSWR_gt?: Maybe<Float>;
  oneArmHangSWR_gte?: Maybe<Float>;
  goalVGrade?: Maybe<Int>;
  goalVGrade_not?: Maybe<Int>;
  goalVGrade_in?: Maybe<Int[] | Int>;
  goalVGrade_not_in?: Maybe<Int[] | Int>;
  goalVGrade_lt?: Maybe<Int>;
  goalVGrade_lte?: Maybe<Int>;
  goalVGrade_gt?: Maybe<Int>;
  goalVGrade_gte?: Maybe<Int>;
  goalSportGrade?: Maybe<String>;
  goalSportGrade_not?: Maybe<String>;
  goalSportGrade_in?: Maybe<String[] | String>;
  goalSportGrade_not_in?: Maybe<String[] | String>;
  goalSportGrade_lt?: Maybe<String>;
  goalSportGrade_lte?: Maybe<String>;
  goalSportGrade_gt?: Maybe<String>;
  goalSportGrade_gte?: Maybe<String>;
  goalSportGrade_contains?: Maybe<String>;
  goalSportGrade_not_contains?: Maybe<String>;
  goalSportGrade_starts_with?: Maybe<String>;
  goalSportGrade_not_starts_with?: Maybe<String>;
  goalSportGrade_ends_with?: Maybe<String>;
  goalSportGrade_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    UserClimbingStatsScalarWhereInput[] | UserClimbingStatsScalarWhereInput
  >;
  OR?: Maybe<
    UserClimbingStatsScalarWhereInput[] | UserClimbingStatsScalarWhereInput
  >;
  NOT?: Maybe<
    UserClimbingStatsScalarWhereInput[] | UserClimbingStatsScalarWhereInput
  >;
}

export interface PostCreateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  post?: Maybe<PostWhereInput>;
  user?: Maybe<UserWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface PostCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface WorkoutWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<WorkoutWhereInput[] | WorkoutWhereInput>;
  OR?: Maybe<WorkoutWhereInput[] | WorkoutWhereInput>;
  NOT?: Maybe<WorkoutWhereInput[] | WorkoutWhereInput>;
}

export interface CommentCreateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface UserClimbingStatsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserClimbingStatsWhereInput>;
  AND?: Maybe<
    | UserClimbingStatsSubscriptionWhereInput[]
    | UserClimbingStatsSubscriptionWhereInput
  >;
  OR?: Maybe<
    | UserClimbingStatsSubscriptionWhereInput[]
    | UserClimbingStatsSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | UserClimbingStatsSubscriptionWhereInput[]
    | UserClimbingStatsSubscriptionWhereInput
  >;
}

export interface CommentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  content: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface CommentUpdateInput {
  post?: Maybe<PostUpdateOneRequiredWithoutCommentsInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  content?: Maybe<String>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface PostUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface PostUpdateWithoutCommentsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface WorkoutUpdateInput {
  author?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertWithoutUserClimbingStatsInput {
  update: UserUpdateWithoutUserClimbingStatsDataInput;
  create: UserCreateWithoutUserClimbingStatsInput;
}

export interface UserUpdateWithoutPostsDataInput {
  userName?: Maybe<String>;
  fullName?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  homeGym?: Maybe<String>;
  logBook?: Maybe<LogItemUpdateManyWithoutUserInput>;
  userClimbingStats?: Maybe<UserClimbingStatsUpdateManyWithoutUserInput>;
  userLevel?: Maybe<UserLevel>;
  phase?: Maybe<String>;
  schedule?: Maybe<WorkoutUpdateManyInput>;
}

export type LogItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LogItemUpdateManyWithoutUserInput {
  create?: Maybe<
    LogItemCreateWithoutUserInput[] | LogItemCreateWithoutUserInput
  >;
  delete?: Maybe<LogItemWhereUniqueInput[] | LogItemWhereUniqueInput>;
  connect?: Maybe<LogItemWhereUniqueInput[] | LogItemWhereUniqueInput>;
  set?: Maybe<LogItemWhereUniqueInput[] | LogItemWhereUniqueInput>;
  disconnect?: Maybe<LogItemWhereUniqueInput[] | LogItemWhereUniqueInput>;
  update?: Maybe<
    | LogItemUpdateWithWhereUniqueWithoutUserInput[]
    | LogItemUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | LogItemUpsertWithWhereUniqueWithoutUserInput[]
    | LogItemUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<LogItemScalarWhereInput[] | LogItemScalarWhereInput>;
  updateMany?: Maybe<
    | LogItemUpdateManyWithWhereNestedInput[]
    | LogItemUpdateManyWithWhereNestedInput
  >;
}

export interface UserClimbingStatsUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutUserClimbingStatsInput>;
  apeIndex?: Maybe<Int>;
  height?: Maybe<Int>;
  weight?: Maybe<Int>;
  maxVGrade?: Maybe<Int>;
  maxSportGrade?: Maybe<String>;
  maxEdgeLoad?: Maybe<Int>;
  maxEdgeTestSize?: Maybe<Int>;
  SWREdge?: Maybe<Float>;
  maxPullLoad?: Maybe<Int>;
  SWRBar?: Maybe<Float>;
  oneArmHangLoadLeft?: Maybe<Int>;
  oneArmHangLoadRight?: Maybe<Int>;
  oneArmHangSWR?: Maybe<Float>;
  goalVGrade?: Maybe<Int>;
  goalSportGrade?: Maybe<String>;
}

export interface LogItemUpdateWithWhereUniqueWithoutUserInput {
  where: LogItemWhereUniqueInput;
  data: LogItemUpdateWithoutUserDataInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LogItemUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  comment?: Maybe<String>;
}

export interface UserClimbingStatsCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutUserClimbingStatsInput;
  apeIndex: Int;
  height: Int;
  weight: Int;
  maxVGrade: Int;
  maxSportGrade: String;
  maxEdgeLoad: Int;
  maxEdgeTestSize: Int;
  SWREdge?: Maybe<Float>;
  maxPullLoad: Int;
  SWRBar?: Maybe<Float>;
  oneArmHangLoadLeft: Int;
  oneArmHangLoadRight: Int;
  oneArmHangSWR: Float;
  goalVGrade: Int;
  goalSportGrade: String;
}

export interface LogItemUpsertWithWhereUniqueWithoutUserInput {
  where: LogItemWhereUniqueInput;
  update: LogItemUpdateWithoutUserDataInput;
  create: LogItemCreateWithoutUserInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface LogItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  AND?: Maybe<LogItemScalarWhereInput[] | LogItemScalarWhereInput>;
  OR?: Maybe<LogItemScalarWhereInput[] | LogItemScalarWhereInput>;
  NOT?: Maybe<LogItemScalarWhereInput[] | LogItemScalarWhereInput>;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface LogItemUpdateManyWithWhereNestedInput {
  where: LogItemScalarWhereInput;
  data: LogItemUpdateManyDataInput;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutPostsInput;
  title: String;
  content: String;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface UserCreateOneWithoutLogBookInput {
  create?: Maybe<UserCreateWithoutLogBookInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface LogItemUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  comment?: Maybe<String>;
}

export interface UserClimbingStatsUpdateManyWithoutUserInput {
  create?: Maybe<
    | UserClimbingStatsCreateWithoutUserInput[]
    | UserClimbingStatsCreateWithoutUserInput
  >;
  delete?: Maybe<
    UserClimbingStatsWhereUniqueInput[] | UserClimbingStatsWhereUniqueInput
  >;
  connect?: Maybe<
    UserClimbingStatsWhereUniqueInput[] | UserClimbingStatsWhereUniqueInput
  >;
  set?: Maybe<
    UserClimbingStatsWhereUniqueInput[] | UserClimbingStatsWhereUniqueInput
  >;
  disconnect?: Maybe<
    UserClimbingStatsWhereUniqueInput[] | UserClimbingStatsWhereUniqueInput
  >;
  update?: Maybe<
    | UserClimbingStatsUpdateWithWhereUniqueWithoutUserInput[]
    | UserClimbingStatsUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | UserClimbingStatsUpsertWithWhereUniqueWithoutUserInput[]
    | UserClimbingStatsUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    UserClimbingStatsScalarWhereInput[] | UserClimbingStatsScalarWhereInput
  >;
  updateMany?: Maybe<
    | UserClimbingStatsUpdateManyWithWhereNestedInput[]
    | UserClimbingStatsUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithoutLogBookDataInput {
  userName?: Maybe<String>;
  fullName?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  homeGym?: Maybe<String>;
  userClimbingStats?: Maybe<UserClimbingStatsUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  userLevel?: Maybe<UserLevel>;
  phase?: Maybe<String>;
  schedule?: Maybe<WorkoutUpdateManyInput>;
}

export interface UserClimbingStatsUpdateWithWhereUniqueWithoutUserInput {
  where: UserClimbingStatsWhereUniqueInput;
  data: UserClimbingStatsUpdateWithoutUserDataInput;
}

export interface UserUpdateOneRequiredWithoutLogBookInput {
  create?: Maybe<UserCreateWithoutLogBookInput>;
  update?: Maybe<UserUpdateWithoutLogBookDataInput>;
  upsert?: Maybe<UserUpsertWithoutLogBookInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserClimbingStatsUpdateWithoutUserDataInput {
  apeIndex?: Maybe<Int>;
  height?: Maybe<Int>;
  weight?: Maybe<Int>;
  maxVGrade?: Maybe<Int>;
  maxSportGrade?: Maybe<String>;
  maxEdgeLoad?: Maybe<Int>;
  maxEdgeTestSize?: Maybe<Int>;
  SWREdge?: Maybe<Float>;
  maxPullLoad?: Maybe<Int>;
  SWRBar?: Maybe<Float>;
  oneArmHangLoadLeft?: Maybe<Int>;
  oneArmHangLoadRight?: Maybe<Int>;
  oneArmHangSWR?: Maybe<Float>;
  goalVGrade?: Maybe<Int>;
  goalSportGrade?: Maybe<String>;
}

export interface UserCreateWithoutLogBookInput {
  id?: Maybe<ID_Input>;
  userName: String;
  fullName: String;
  name: String;
  email: String;
  password: String;
  city: String;
  state: String;
  homeGym: String;
  userClimbingStats?: Maybe<UserClimbingStatsCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  userLevel: UserLevel;
  phase?: Maybe<String>;
  schedule?: Maybe<WorkoutCreateManyInput>;
}

export interface UserClimbingStatsUpsertWithWhereUniqueWithoutUserInput {
  where: UserClimbingStatsWhereUniqueInput;
  update: UserClimbingStatsUpdateWithoutUserDataInput;
  create: UserClimbingStatsCreateWithoutUserInput;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  post: PostCreateOneWithoutCommentsInput;
  user: UserCreateOneInput;
  content: String;
}

export interface LogItemCreateInput {
  user: UserCreateOneWithoutLogBookInput;
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  comment?: Maybe<String>;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutPostsInput;
  title: String;
  content: String;
}

export interface UserClimbingStatsUpdateManyWithWhereNestedInput {
  where: UserClimbingStatsScalarWhereInput;
  data: UserClimbingStatsUpdateManyDataInput;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  userName: String;
  fullName: String;
  name: String;
  email: String;
  password: String;
  city: String;
  state: String;
  homeGym: String;
  logBook?: Maybe<LogItemCreateManyWithoutUserInput>;
  userClimbingStats?: Maybe<UserClimbingStatsCreateManyWithoutUserInput>;
  userLevel: UserLevel;
  phase?: Maybe<String>;
  schedule?: Maybe<WorkoutCreateManyInput>;
}

export interface UserClimbingStatsUpdateManyDataInput {
  apeIndex?: Maybe<Int>;
  height?: Maybe<Int>;
  weight?: Maybe<Int>;
  maxVGrade?: Maybe<Int>;
  maxSportGrade?: Maybe<String>;
  maxEdgeLoad?: Maybe<Int>;
  maxEdgeTestSize?: Maybe<Int>;
  SWREdge?: Maybe<Float>;
  maxPullLoad?: Maybe<Int>;
  SWRBar?: Maybe<Float>;
  oneArmHangLoadLeft?: Maybe<Int>;
  oneArmHangLoadRight?: Maybe<Int>;
  oneArmHangSWR?: Maybe<Float>;
  goalVGrade?: Maybe<Int>;
  goalSportGrade?: Maybe<String>;
}

export interface LogItemCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  comment?: Maybe<String>;
}

export interface WorkoutUpdateManyInput {
  create?: Maybe<WorkoutCreateInput[] | WorkoutCreateInput>;
  update?: Maybe<
    | WorkoutUpdateWithWhereUniqueNestedInput[]
    | WorkoutUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | WorkoutUpsertWithWhereUniqueNestedInput[]
    | WorkoutUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<WorkoutWhereUniqueInput[] | WorkoutWhereUniqueInput>;
  connect?: Maybe<WorkoutWhereUniqueInput[] | WorkoutWhereUniqueInput>;
  set?: Maybe<WorkoutWhereUniqueInput[] | WorkoutWhereUniqueInput>;
  disconnect?: Maybe<WorkoutWhereUniqueInput[] | WorkoutWhereUniqueInput>;
  deleteMany?: Maybe<WorkoutScalarWhereInput[] | WorkoutScalarWhereInput>;
  updateMany?: Maybe<
    | WorkoutUpdateManyWithWhereNestedInput[]
    | WorkoutUpdateManyWithWhereNestedInput
  >;
}

export interface UserClimbingStatsCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  apeIndex: Int;
  height: Int;
  weight: Int;
  maxVGrade: Int;
  maxSportGrade: String;
  maxEdgeLoad: Int;
  maxEdgeTestSize: Int;
  SWREdge?: Maybe<Float>;
  maxPullLoad: Int;
  SWRBar?: Maybe<Float>;
  oneArmHangLoadLeft: Int;
  oneArmHangLoadRight: Int;
  oneArmHangSWR: Float;
  goalVGrade: Int;
  goalSportGrade: String;
}

export interface WorkoutUpdateWithWhereUniqueNestedInput {
  where: WorkoutWhereUniqueInput;
  data: WorkoutUpdateDataInput;
}

export interface WorkoutCreateInput {
  id?: Maybe<ID_Input>;
  author: String;
  title: String;
  description: String;
}

export interface WorkoutUpdateDataInput {
  author?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface WorkoutSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WorkoutWhereInput>;
  AND?: Maybe<WorkoutSubscriptionWhereInput[] | WorkoutSubscriptionWhereInput>;
  OR?: Maybe<WorkoutSubscriptionWhereInput[] | WorkoutSubscriptionWhereInput>;
  NOT?: Maybe<WorkoutSubscriptionWhereInput[] | WorkoutSubscriptionWhereInput>;
}

export interface WorkoutUpsertWithWhereUniqueNestedInput {
  where: WorkoutWhereUniqueInput;
  update: WorkoutUpdateDataInput;
  create: WorkoutCreateInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userName?: Maybe<String>;
  userName_not?: Maybe<String>;
  userName_in?: Maybe<String[] | String>;
  userName_not_in?: Maybe<String[] | String>;
  userName_lt?: Maybe<String>;
  userName_lte?: Maybe<String>;
  userName_gt?: Maybe<String>;
  userName_gte?: Maybe<String>;
  userName_contains?: Maybe<String>;
  userName_not_contains?: Maybe<String>;
  userName_starts_with?: Maybe<String>;
  userName_not_starts_with?: Maybe<String>;
  userName_ends_with?: Maybe<String>;
  userName_not_ends_with?: Maybe<String>;
  fullName?: Maybe<String>;
  fullName_not?: Maybe<String>;
  fullName_in?: Maybe<String[] | String>;
  fullName_not_in?: Maybe<String[] | String>;
  fullName_lt?: Maybe<String>;
  fullName_lte?: Maybe<String>;
  fullName_gt?: Maybe<String>;
  fullName_gte?: Maybe<String>;
  fullName_contains?: Maybe<String>;
  fullName_not_contains?: Maybe<String>;
  fullName_starts_with?: Maybe<String>;
  fullName_not_starts_with?: Maybe<String>;
  fullName_ends_with?: Maybe<String>;
  fullName_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  homeGym?: Maybe<String>;
  homeGym_not?: Maybe<String>;
  homeGym_in?: Maybe<String[] | String>;
  homeGym_not_in?: Maybe<String[] | String>;
  homeGym_lt?: Maybe<String>;
  homeGym_lte?: Maybe<String>;
  homeGym_gt?: Maybe<String>;
  homeGym_gte?: Maybe<String>;
  homeGym_contains?: Maybe<String>;
  homeGym_not_contains?: Maybe<String>;
  homeGym_starts_with?: Maybe<String>;
  homeGym_not_starts_with?: Maybe<String>;
  homeGym_ends_with?: Maybe<String>;
  homeGym_not_ends_with?: Maybe<String>;
  logBook_every?: Maybe<LogItemWhereInput>;
  logBook_some?: Maybe<LogItemWhereInput>;
  logBook_none?: Maybe<LogItemWhereInput>;
  userClimbingStats_every?: Maybe<UserClimbingStatsWhereInput>;
  userClimbingStats_some?: Maybe<UserClimbingStatsWhereInput>;
  userClimbingStats_none?: Maybe<UserClimbingStatsWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  userLevel?: Maybe<UserLevel>;
  userLevel_not?: Maybe<UserLevel>;
  userLevel_in?: Maybe<UserLevel[] | UserLevel>;
  userLevel_not_in?: Maybe<UserLevel[] | UserLevel>;
  phase?: Maybe<String>;
  phase_not?: Maybe<String>;
  phase_in?: Maybe<String[] | String>;
  phase_not_in?: Maybe<String[] | String>;
  phase_lt?: Maybe<String>;
  phase_lte?: Maybe<String>;
  phase_gt?: Maybe<String>;
  phase_gte?: Maybe<String>;
  phase_contains?: Maybe<String>;
  phase_not_contains?: Maybe<String>;
  phase_starts_with?: Maybe<String>;
  phase_not_starts_with?: Maybe<String>;
  phase_ends_with?: Maybe<String>;
  phase_not_ends_with?: Maybe<String>;
  schedule_every?: Maybe<WorkoutWhereInput>;
  schedule_some?: Maybe<WorkoutWhereInput>;
  schedule_none?: Maybe<WorkoutWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface WorkoutScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<WorkoutScalarWhereInput[] | WorkoutScalarWhereInput>;
  OR?: Maybe<WorkoutScalarWhereInput[] | WorkoutScalarWhereInput>;
  NOT?: Maybe<WorkoutScalarWhereInput[] | WorkoutScalarWhereInput>;
}

export interface LogItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LogItemWhereInput>;
  AND?: Maybe<LogItemSubscriptionWhereInput[] | LogItemSubscriptionWhereInput>;
  OR?: Maybe<LogItemSubscriptionWhereInput[] | LogItemSubscriptionWhereInput>;
  NOT?: Maybe<LogItemSubscriptionWhereInput[] | LogItemSubscriptionWhereInput>;
}

export interface WorkoutUpdateManyWithWhereNestedInput {
  where: WorkoutScalarWhereInput;
  data: WorkoutUpdateManyDataInput;
}

export interface UserClimbingStatsUpdateManyMutationInput {
  apeIndex?: Maybe<Int>;
  height?: Maybe<Int>;
  weight?: Maybe<Int>;
  maxVGrade?: Maybe<Int>;
  maxSportGrade?: Maybe<String>;
  maxEdgeLoad?: Maybe<Int>;
  maxEdgeTestSize?: Maybe<Int>;
  SWREdge?: Maybe<Float>;
  maxPullLoad?: Maybe<Int>;
  SWRBar?: Maybe<Float>;
  oneArmHangLoadLeft?: Maybe<Int>;
  oneArmHangLoadRight?: Maybe<Int>;
  oneArmHangSWR?: Maybe<Float>;
  goalVGrade?: Maybe<Int>;
  goalSportGrade?: Maybe<String>;
}

export interface WorkoutUpdateManyDataInput {
  author?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutUserClimbingStatsInput {
  create?: Maybe<UserCreateWithoutUserClimbingStatsInput>;
  update?: Maybe<UserUpdateWithoutUserClimbingStatsDataInput>;
  upsert?: Maybe<UserUpsertWithoutUserClimbingStatsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface UserCreateOneWithoutUserClimbingStatsInput {
  create?: Maybe<UserCreateWithoutUserClimbingStatsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface UserUpdateInput {
  userName?: Maybe<String>;
  fullName?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  homeGym?: Maybe<String>;
  logBook?: Maybe<LogItemUpdateManyWithoutUserInput>;
  userClimbingStats?: Maybe<UserClimbingStatsUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  userLevel?: Maybe<UserLevel>;
  phase?: Maybe<String>;
  schedule?: Maybe<WorkoutUpdateManyInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type UserClimbingStatsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateDataInput {
  userName?: Maybe<String>;
  fullName?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  homeGym?: Maybe<String>;
  logBook?: Maybe<LogItemUpdateManyWithoutUserInput>;
  userClimbingStats?: Maybe<UserClimbingStatsUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  userLevel?: Maybe<UserLevel>;
  phase?: Maybe<String>;
  schedule?: Maybe<WorkoutUpdateManyInput>;
}

export type WorkoutWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostUpdateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutUserInput[]
    | PostUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutUserInput[]
    | PostUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutUserDataInput;
}

export interface UserClimbingStatsCreateManyWithoutUserInput {
  create?: Maybe<
    | UserClimbingStatsCreateWithoutUserInput[]
    | UserClimbingStatsCreateWithoutUserInput
  >;
  connect?: Maybe<
    UserClimbingStatsWhereUniqueInput[] | UserClimbingStatsWhereUniqueInput
  >;
}

export interface PostUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface CommentUpdateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface LogItemWhereInput {
  user?: Maybe<UserWhereInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  AND?: Maybe<LogItemWhereInput[] | LogItemWhereInput>;
  OR?: Maybe<LogItemWhereInput[] | LogItemWhereInput>;
  NOT?: Maybe<LogItemWhereInput[] | LogItemWhereInput>;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export interface UserUpdateWithoutUserClimbingStatsDataInput {
  userName?: Maybe<String>;
  fullName?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  homeGym?: Maybe<String>;
  logBook?: Maybe<LogItemUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  userLevel?: Maybe<UserLevel>;
  phase?: Maybe<String>;
  schedule?: Maybe<WorkoutUpdateManyInput>;
}

export interface CommentUpdateWithoutPostDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  content?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  userName?: Maybe<String>;
  fullName?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  homeGym?: Maybe<String>;
  userLevel?: Maybe<UserLevel>;
  phase?: Maybe<String>;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export interface UserUpsertWithoutLogBookInput {
  update: UserUpdateWithoutLogBookDataInput;
  create: UserCreateWithoutLogBookInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface WorkoutCreateManyInput {
  create?: Maybe<WorkoutCreateInput[] | WorkoutCreateInput>;
  connect?: Maybe<WorkoutWhereUniqueInput[] | WorkoutWhereUniqueInput>;
}

export interface CommentUpdateManyDataInput {
  content?: Maybe<String>;
}

export interface WorkoutUpdateManyMutationInput {
  author?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutUserDataInput;
  create: PostCreateWithoutUserInput;
}

export interface PostUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface LogItemUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutLogBookInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  comment?: Maybe<String>;
}

export interface UserCreateWithoutUserClimbingStatsInput {
  id?: Maybe<ID_Input>;
  userName: String;
  fullName: String;
  name: String;
  email: String;
  password: String;
  city: String;
  state: String;
  homeGym: String;
  logBook?: Maybe<LogItemCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  userLevel: UserLevel;
  phase?: Maybe<String>;
  schedule?: Maybe<WorkoutCreateManyInput>;
}

export interface UserClimbingStatsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  apeIndex?: Maybe<Int>;
  apeIndex_not?: Maybe<Int>;
  apeIndex_in?: Maybe<Int[] | Int>;
  apeIndex_not_in?: Maybe<Int[] | Int>;
  apeIndex_lt?: Maybe<Int>;
  apeIndex_lte?: Maybe<Int>;
  apeIndex_gt?: Maybe<Int>;
  apeIndex_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  weight?: Maybe<Int>;
  weight_not?: Maybe<Int>;
  weight_in?: Maybe<Int[] | Int>;
  weight_not_in?: Maybe<Int[] | Int>;
  weight_lt?: Maybe<Int>;
  weight_lte?: Maybe<Int>;
  weight_gt?: Maybe<Int>;
  weight_gte?: Maybe<Int>;
  maxVGrade?: Maybe<Int>;
  maxVGrade_not?: Maybe<Int>;
  maxVGrade_in?: Maybe<Int[] | Int>;
  maxVGrade_not_in?: Maybe<Int[] | Int>;
  maxVGrade_lt?: Maybe<Int>;
  maxVGrade_lte?: Maybe<Int>;
  maxVGrade_gt?: Maybe<Int>;
  maxVGrade_gte?: Maybe<Int>;
  maxSportGrade?: Maybe<String>;
  maxSportGrade_not?: Maybe<String>;
  maxSportGrade_in?: Maybe<String[] | String>;
  maxSportGrade_not_in?: Maybe<String[] | String>;
  maxSportGrade_lt?: Maybe<String>;
  maxSportGrade_lte?: Maybe<String>;
  maxSportGrade_gt?: Maybe<String>;
  maxSportGrade_gte?: Maybe<String>;
  maxSportGrade_contains?: Maybe<String>;
  maxSportGrade_not_contains?: Maybe<String>;
  maxSportGrade_starts_with?: Maybe<String>;
  maxSportGrade_not_starts_with?: Maybe<String>;
  maxSportGrade_ends_with?: Maybe<String>;
  maxSportGrade_not_ends_with?: Maybe<String>;
  maxEdgeLoad?: Maybe<Int>;
  maxEdgeLoad_not?: Maybe<Int>;
  maxEdgeLoad_in?: Maybe<Int[] | Int>;
  maxEdgeLoad_not_in?: Maybe<Int[] | Int>;
  maxEdgeLoad_lt?: Maybe<Int>;
  maxEdgeLoad_lte?: Maybe<Int>;
  maxEdgeLoad_gt?: Maybe<Int>;
  maxEdgeLoad_gte?: Maybe<Int>;
  maxEdgeTestSize?: Maybe<Int>;
  maxEdgeTestSize_not?: Maybe<Int>;
  maxEdgeTestSize_in?: Maybe<Int[] | Int>;
  maxEdgeTestSize_not_in?: Maybe<Int[] | Int>;
  maxEdgeTestSize_lt?: Maybe<Int>;
  maxEdgeTestSize_lte?: Maybe<Int>;
  maxEdgeTestSize_gt?: Maybe<Int>;
  maxEdgeTestSize_gte?: Maybe<Int>;
  SWREdge?: Maybe<Float>;
  SWREdge_not?: Maybe<Float>;
  SWREdge_in?: Maybe<Float[] | Float>;
  SWREdge_not_in?: Maybe<Float[] | Float>;
  SWREdge_lt?: Maybe<Float>;
  SWREdge_lte?: Maybe<Float>;
  SWREdge_gt?: Maybe<Float>;
  SWREdge_gte?: Maybe<Float>;
  maxPullLoad?: Maybe<Int>;
  maxPullLoad_not?: Maybe<Int>;
  maxPullLoad_in?: Maybe<Int[] | Int>;
  maxPullLoad_not_in?: Maybe<Int[] | Int>;
  maxPullLoad_lt?: Maybe<Int>;
  maxPullLoad_lte?: Maybe<Int>;
  maxPullLoad_gt?: Maybe<Int>;
  maxPullLoad_gte?: Maybe<Int>;
  SWRBar?: Maybe<Float>;
  SWRBar_not?: Maybe<Float>;
  SWRBar_in?: Maybe<Float[] | Float>;
  SWRBar_not_in?: Maybe<Float[] | Float>;
  SWRBar_lt?: Maybe<Float>;
  SWRBar_lte?: Maybe<Float>;
  SWRBar_gt?: Maybe<Float>;
  SWRBar_gte?: Maybe<Float>;
  oneArmHangLoadLeft?: Maybe<Int>;
  oneArmHangLoadLeft_not?: Maybe<Int>;
  oneArmHangLoadLeft_in?: Maybe<Int[] | Int>;
  oneArmHangLoadLeft_not_in?: Maybe<Int[] | Int>;
  oneArmHangLoadLeft_lt?: Maybe<Int>;
  oneArmHangLoadLeft_lte?: Maybe<Int>;
  oneArmHangLoadLeft_gt?: Maybe<Int>;
  oneArmHangLoadLeft_gte?: Maybe<Int>;
  oneArmHangLoadRight?: Maybe<Int>;
  oneArmHangLoadRight_not?: Maybe<Int>;
  oneArmHangLoadRight_in?: Maybe<Int[] | Int>;
  oneArmHangLoadRight_not_in?: Maybe<Int[] | Int>;
  oneArmHangLoadRight_lt?: Maybe<Int>;
  oneArmHangLoadRight_lte?: Maybe<Int>;
  oneArmHangLoadRight_gt?: Maybe<Int>;
  oneArmHangLoadRight_gte?: Maybe<Int>;
  oneArmHangSWR?: Maybe<Float>;
  oneArmHangSWR_not?: Maybe<Float>;
  oneArmHangSWR_in?: Maybe<Float[] | Float>;
  oneArmHangSWR_not_in?: Maybe<Float[] | Float>;
  oneArmHangSWR_lt?: Maybe<Float>;
  oneArmHangSWR_lte?: Maybe<Float>;
  oneArmHangSWR_gt?: Maybe<Float>;
  oneArmHangSWR_gte?: Maybe<Float>;
  goalVGrade?: Maybe<Int>;
  goalVGrade_not?: Maybe<Int>;
  goalVGrade_in?: Maybe<Int[] | Int>;
  goalVGrade_not_in?: Maybe<Int[] | Int>;
  goalVGrade_lt?: Maybe<Int>;
  goalVGrade_lte?: Maybe<Int>;
  goalVGrade_gt?: Maybe<Int>;
  goalVGrade_gte?: Maybe<Int>;
  goalSportGrade?: Maybe<String>;
  goalSportGrade_not?: Maybe<String>;
  goalSportGrade_in?: Maybe<String[] | String>;
  goalSportGrade_not_in?: Maybe<String[] | String>;
  goalSportGrade_lt?: Maybe<String>;
  goalSportGrade_lte?: Maybe<String>;
  goalSportGrade_gt?: Maybe<String>;
  goalSportGrade_gte?: Maybe<String>;
  goalSportGrade_contains?: Maybe<String>;
  goalSportGrade_not_contains?: Maybe<String>;
  goalSportGrade_starts_with?: Maybe<String>;
  goalSportGrade_not_starts_with?: Maybe<String>;
  goalSportGrade_ends_with?: Maybe<String>;
  goalSportGrade_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserClimbingStatsWhereInput[] | UserClimbingStatsWhereInput>;
  OR?: Maybe<UserClimbingStatsWhereInput[] | UserClimbingStatsWhereInput>;
  NOT?: Maybe<UserClimbingStatsWhereInput[] | UserClimbingStatsWhereInput>;
}

export interface LogItemCreateManyWithoutUserInput {
  create?: Maybe<
    LogItemCreateWithoutUserInput[] | LogItemCreateWithoutUserInput
  >;
  connect?: Maybe<LogItemWhereUniqueInput[] | LogItemWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WorkoutPreviousValues {
  id: ID_Output;
  author: String;
  title: String;
  description: String;
}

export interface WorkoutPreviousValuesPromise
  extends Promise<WorkoutPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  author: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface WorkoutPreviousValuesSubscription
  extends Promise<AsyncIterator<WorkoutPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface LogItemConnection {
  pageInfo: PageInfo;
  edges: LogItemEdge[];
}

export interface LogItemConnectionPromise
  extends Promise<LogItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LogItemEdge>>() => T;
  aggregate: <T = AggregateLogItemPromise>() => T;
}

export interface LogItemConnectionSubscription
  extends Promise<AsyncIterator<LogItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LogItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLogItemSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  userName: String;
  fullName: String;
  name: String;
  email: String;
  password: String;
  city: String;
  state: String;
  homeGym: String;
  userLevel: UserLevel;
  phase?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userName: () => Promise<String>;
  fullName: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  homeGym: () => Promise<String>;
  userLevel: () => Promise<UserLevel>;
  phase: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userName: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  homeGym: () => Promise<AsyncIterator<String>>;
  userLevel: () => Promise<AsyncIterator<UserLevel>>;
  phase: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserClimbingStatsPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  apeIndex: Int;
  height: Int;
  weight: Int;
  maxVGrade: Int;
  maxSportGrade: String;
  maxEdgeLoad: Int;
  maxEdgeTestSize: Int;
  SWREdge?: Float;
  maxPullLoad: Int;
  SWRBar?: Float;
  oneArmHangLoadLeft: Int;
  oneArmHangLoadRight: Int;
  oneArmHangSWR: Float;
  goalVGrade: Int;
  goalSportGrade: String;
}

export interface UserClimbingStatsPreviousValuesPromise
  extends Promise<UserClimbingStatsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  apeIndex: () => Promise<Int>;
  height: () => Promise<Int>;
  weight: () => Promise<Int>;
  maxVGrade: () => Promise<Int>;
  maxSportGrade: () => Promise<String>;
  maxEdgeLoad: () => Promise<Int>;
  maxEdgeTestSize: () => Promise<Int>;
  SWREdge: () => Promise<Float>;
  maxPullLoad: () => Promise<Int>;
  SWRBar: () => Promise<Float>;
  oneArmHangLoadLeft: () => Promise<Int>;
  oneArmHangLoadRight: () => Promise<Int>;
  oneArmHangSWR: () => Promise<Float>;
  goalVGrade: () => Promise<Int>;
  goalSportGrade: () => Promise<String>;
}

export interface UserClimbingStatsPreviousValuesSubscription
  extends Promise<AsyncIterator<UserClimbingStatsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  apeIndex: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  weight: () => Promise<AsyncIterator<Int>>;
  maxVGrade: () => Promise<AsyncIterator<Int>>;
  maxSportGrade: () => Promise<AsyncIterator<String>>;
  maxEdgeLoad: () => Promise<AsyncIterator<Int>>;
  maxEdgeTestSize: () => Promise<AsyncIterator<Int>>;
  SWREdge: () => Promise<AsyncIterator<Float>>;
  maxPullLoad: () => Promise<AsyncIterator<Int>>;
  SWRBar: () => Promise<AsyncIterator<Float>>;
  oneArmHangLoadLeft: () => Promise<AsyncIterator<Int>>;
  oneArmHangLoadRight: () => Promise<AsyncIterator<Int>>;
  oneArmHangSWR: () => Promise<AsyncIterator<Float>>;
  goalVGrade: () => Promise<AsyncIterator<Int>>;
  goalSportGrade: () => Promise<AsyncIterator<String>>;
}

export interface UserClimbingStatsSubscriptionPayload {
  mutation: MutationType;
  node: UserClimbingStats;
  updatedFields: String[];
  previousValues: UserClimbingStatsPreviousValues;
}

export interface UserClimbingStatsSubscriptionPayloadPromise
  extends Promise<UserClimbingStatsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserClimbingStatsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserClimbingStatsPreviousValuesPromise>() => T;
}

export interface UserClimbingStatsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserClimbingStatsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserClimbingStatsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserClimbingStatsPreviousValuesSubscription>() => T;
}

export interface WorkoutEdge {
  node: Workout;
  cursor: String;
}

export interface WorkoutEdgePromise extends Promise<WorkoutEdge>, Fragmentable {
  node: <T = WorkoutPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkoutEdgeSubscription
  extends Promise<AsyncIterator<WorkoutEdge>>,
    Fragmentable {
  node: <T = WorkoutSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserClimbingStats {
  count: Int;
}

export interface AggregateUserClimbingStatsPromise
  extends Promise<AggregateUserClimbingStats>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserClimbingStatsSubscription
  extends Promise<AsyncIterator<AggregateUserClimbingStats>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface UserClimbingStatsConnection {
  pageInfo: PageInfo;
  edges: UserClimbingStatsEdge[];
}

export interface UserClimbingStatsConnectionPromise
  extends Promise<UserClimbingStatsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserClimbingStatsEdge>>() => T;
  aggregate: <T = AggregateUserClimbingStatsPromise>() => T;
}

export interface UserClimbingStatsConnectionSubscription
  extends Promise<AsyncIterator<UserClimbingStatsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserClimbingStatsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserClimbingStatsSubscription>() => T;
}

export interface User {
  id: ID_Output;
  userName: String;
  fullName: String;
  name: String;
  email: String;
  password: String;
  city: String;
  state: String;
  homeGym: String;
  userLevel: UserLevel;
  phase?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  userName: () => Promise<String>;
  fullName: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  homeGym: () => Promise<String>;
  logBook: <T = FragmentableArray<LogItem>>(args?: {
    where?: LogItemWhereInput;
    orderBy?: LogItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userClimbingStats: <T = FragmentableArray<UserClimbingStats>>(args?: {
    where?: UserClimbingStatsWhereInput;
    orderBy?: UserClimbingStatsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userLevel: () => Promise<UserLevel>;
  phase: () => Promise<String>;
  schedule: <T = FragmentableArray<Workout>>(args?: {
    where?: WorkoutWhereInput;
    orderBy?: WorkoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userName: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  homeGym: () => Promise<AsyncIterator<String>>;
  logBook: <T = Promise<AsyncIterator<LogItemSubscription>>>(args?: {
    where?: LogItemWhereInput;
    orderBy?: LogItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userClimbingStats: <
    T = Promise<AsyncIterator<UserClimbingStatsSubscription>>
  >(args?: {
    where?: UserClimbingStatsWhereInput;
    orderBy?: UserClimbingStatsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userLevel: () => Promise<AsyncIterator<UserLevel>>;
  phase: () => Promise<AsyncIterator<String>>;
  schedule: <T = Promise<AsyncIterator<WorkoutSubscription>>>(args?: {
    where?: WorkoutWhereInput;
    orderBy?: WorkoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userName: () => Promise<String>;
  fullName: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  homeGym: () => Promise<String>;
  logBook: <T = FragmentableArray<LogItem>>(args?: {
    where?: LogItemWhereInput;
    orderBy?: LogItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userClimbingStats: <T = FragmentableArray<UserClimbingStats>>(args?: {
    where?: UserClimbingStatsWhereInput;
    orderBy?: UserClimbingStatsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userLevel: () => Promise<UserLevel>;
  phase: () => Promise<String>;
  schedule: <T = FragmentableArray<Workout>>(args?: {
    where?: WorkoutWhereInput;
    orderBy?: WorkoutOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Comment {
  id: ID_Output;
  content: String;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  post: <T = PostPromise>() => T;
  user: <T = UserPromise>() => T;
  content: () => Promise<String>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  post: <T = PostSubscription>() => T;
  user: <T = UserSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  post: <T = PostPromise>() => T;
  user: <T = UserPromise>() => T;
  content: () => Promise<String>;
}

export interface Post {
  id: ID_Output;
  title: String;
  content: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  content: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  content: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentPreviousValues {
  id: ID_Output;
  content: String;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLogItem {
  count: Int;
}

export interface AggregateLogItemPromise
  extends Promise<AggregateLogItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLogItemSubscription
  extends Promise<AsyncIterator<AggregateLogItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Workout {
  id: ID_Output;
  author: String;
  title: String;
  description: String;
}

export interface WorkoutPromise extends Promise<Workout>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface WorkoutSubscription
  extends Promise<AsyncIterator<Workout>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface WorkoutNullablePromise
  extends Promise<Workout | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  author: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface WorkoutSubscriptionPayload {
  mutation: MutationType;
  node: Workout;
  updatedFields: String[];
  previousValues: WorkoutPreviousValues;
}

export interface WorkoutSubscriptionPayloadPromise
  extends Promise<WorkoutSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkoutPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkoutPreviousValuesPromise>() => T;
}

export interface WorkoutSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkoutSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkoutSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkoutPreviousValuesSubscription>() => T;
}

export interface LogItemSubscriptionPayload {
  mutation: MutationType;
  node: LogItem;
  updatedFields: String[];
  previousValues: LogItemPreviousValues;
}

export interface LogItemSubscriptionPayloadPromise
  extends Promise<LogItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LogItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LogItemPreviousValuesPromise>() => T;
}

export interface LogItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LogItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LogItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LogItemPreviousValuesSubscription>() => T;
}

export interface WorkoutConnection {
  pageInfo: PageInfo;
  edges: WorkoutEdge[];
}

export interface WorkoutConnectionPromise
  extends Promise<WorkoutConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkoutEdge>>() => T;
  aggregate: <T = AggregateWorkoutPromise>() => T;
}

export interface WorkoutConnectionSubscription
  extends Promise<AsyncIterator<WorkoutConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkoutEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkoutSubscription>() => T;
}

export interface LogItemPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  title: String;
  description: String;
  comment?: String;
}

export interface LogItemPreviousValuesPromise
  extends Promise<LogItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  comment: () => Promise<String>;
}

export interface LogItemPreviousValuesSubscription
  extends Promise<AsyncIterator<LogItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  comment: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LogItem {
  id: ID_Output;
  createdAt: DateTimeOutput;
  title: String;
  description: String;
  comment?: String;
}

export interface LogItemPromise extends Promise<LogItem>, Fragmentable {
  user: <T = UserPromise>() => T;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  comment: () => Promise<String>;
}

export interface LogItemSubscription
  extends Promise<AsyncIterator<LogItem>>,
    Fragmentable {
  user: <T = UserSubscription>() => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  comment: () => Promise<AsyncIterator<String>>;
}

export interface LogItemNullablePromise
  extends Promise<LogItem | null>,
    Fragmentable {
  user: <T = UserPromise>() => T;
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  comment: () => Promise<String>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LogItemEdge {
  node: LogItem;
  cursor: String;
}

export interface LogItemEdgePromise extends Promise<LogItemEdge>, Fragmentable {
  node: <T = LogItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LogItemEdgeSubscription
  extends Promise<AsyncIterator<LogItemEdge>>,
    Fragmentable {
  node: <T = LogItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserClimbingStats {
  id: ID_Output;
  createdAt: DateTimeOutput;
  apeIndex: Int;
  height: Int;
  weight: Int;
  maxVGrade: Int;
  maxSportGrade: String;
  maxEdgeLoad: Int;
  maxEdgeTestSize: Int;
  SWREdge?: Float;
  maxPullLoad: Int;
  SWRBar?: Float;
  oneArmHangLoadLeft: Int;
  oneArmHangLoadRight: Int;
  oneArmHangSWR: Float;
  goalVGrade: Int;
  goalSportGrade: String;
}

export interface UserClimbingStatsPromise
  extends Promise<UserClimbingStats>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  apeIndex: () => Promise<Int>;
  height: () => Promise<Int>;
  weight: () => Promise<Int>;
  maxVGrade: () => Promise<Int>;
  maxSportGrade: () => Promise<String>;
  maxEdgeLoad: () => Promise<Int>;
  maxEdgeTestSize: () => Promise<Int>;
  SWREdge: () => Promise<Float>;
  maxPullLoad: () => Promise<Int>;
  SWRBar: () => Promise<Float>;
  oneArmHangLoadLeft: () => Promise<Int>;
  oneArmHangLoadRight: () => Promise<Int>;
  oneArmHangSWR: () => Promise<Float>;
  goalVGrade: () => Promise<Int>;
  goalSportGrade: () => Promise<String>;
}

export interface UserClimbingStatsSubscription
  extends Promise<AsyncIterator<UserClimbingStats>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  apeIndex: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  weight: () => Promise<AsyncIterator<Int>>;
  maxVGrade: () => Promise<AsyncIterator<Int>>;
  maxSportGrade: () => Promise<AsyncIterator<String>>;
  maxEdgeLoad: () => Promise<AsyncIterator<Int>>;
  maxEdgeTestSize: () => Promise<AsyncIterator<Int>>;
  SWREdge: () => Promise<AsyncIterator<Float>>;
  maxPullLoad: () => Promise<AsyncIterator<Int>>;
  SWRBar: () => Promise<AsyncIterator<Float>>;
  oneArmHangLoadLeft: () => Promise<AsyncIterator<Int>>;
  oneArmHangLoadRight: () => Promise<AsyncIterator<Int>>;
  oneArmHangSWR: () => Promise<AsyncIterator<Float>>;
  goalVGrade: () => Promise<AsyncIterator<Int>>;
  goalSportGrade: () => Promise<AsyncIterator<String>>;
}

export interface UserClimbingStatsNullablePromise
  extends Promise<UserClimbingStats | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  apeIndex: () => Promise<Int>;
  height: () => Promise<Int>;
  weight: () => Promise<Int>;
  maxVGrade: () => Promise<Int>;
  maxSportGrade: () => Promise<String>;
  maxEdgeLoad: () => Promise<Int>;
  maxEdgeTestSize: () => Promise<Int>;
  SWREdge: () => Promise<Float>;
  maxPullLoad: () => Promise<Int>;
  SWRBar: () => Promise<Float>;
  oneArmHangLoadLeft: () => Promise<Int>;
  oneArmHangLoadRight: () => Promise<Int>;
  oneArmHangSWR: () => Promise<Float>;
  goalVGrade: () => Promise<Int>;
  goalSportGrade: () => Promise<String>;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  content: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface AggregateWorkout {
  count: Int;
}

export interface AggregateWorkoutPromise
  extends Promise<AggregateWorkout>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkoutSubscription
  extends Promise<AsyncIterator<AggregateWorkout>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserClimbingStatsEdge {
  node: UserClimbingStats;
  cursor: String;
}

export interface UserClimbingStatsEdgePromise
  extends Promise<UserClimbingStatsEdge>,
    Fragmentable {
  node: <T = UserClimbingStatsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserClimbingStatsEdgeSubscription
  extends Promise<AsyncIterator<UserClimbingStatsEdge>>,
    Fragmentable {
  node: <T = UserClimbingStatsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "UserLevel",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "LogItem",
    embedded: false
  },
  {
    name: "UserClimbingStats",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Workout",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
